{"version":3,"file":"wasm-imagemagick.esm-es5.min.js","sources":["../../node_modules/tslib/tslib.es6.js","../../node_modules/p-map/index.js","../../src/util/misc.ts","../../src/util/cli.ts","../../src/util/file.ts","../../src/util/html.ts","../../src/util/imageBuiltIn.ts","../../src/util/image.ts","../../src/util/imageCompare.ts","../../src/util/imageExtractInfo.ts","../../src/util/support.ts","../../src/execute.ts","../../src/imageHome.ts","../../src/executionContext.ts","../../src/magickApi.ts","../../src/list/IMAlign.ts","../../src/list/IMAlpha.ts","../../src/list/IMAutoThreshold.ts","../../src/list/IMBoolean.ts","../../src/list/IMCache.ts","../../src/list/IMChannel.ts","../../src/list/IMClass.ts","../../src/list/IMClipPath.ts","../../src/list/IMColorspace.ts","../../src/list/IMCommand.ts","../../src/list/IMCompliance.ts","../../src/list/IMComplex.ts","../../src/list/IMCompose.ts","../../src/list/IMCompress.ts","../../src/list/IMDataType.ts","../../src/list/IMDebug.ts","../../src/list/IMDecoration.ts","../../src/list/IMDirection.ts","../../src/list/IMDispose.ts","../../src/list/IMDistort.ts","../../src/list/IMDither.ts","../../src/list/IMEndian.ts","../../src/list/IMEvaluate.ts","../../src/list/IMFillRule.ts","../../src/list/IMFilter.ts","../../src/list/IMFunction.ts","../../src/list/IMGradient.ts","../../src/list/IMGravity.ts","../../src/list/IMIntensity.ts","../../src/list/IMIntent.ts","../../src/list/IMInterlace.ts","../../src/list/IMInterpolate.ts","../../src/list/IMKernel.ts","../../src/list/IMLayers.ts","../../src/list/IMLineCap.ts","../../src/list/IMLineJoin.ts","../../src/list/IMList.ts","../../src/list/IMLogEvent.ts","../../src/list/IMLog.ts","../../src/list/IMMethod.ts","../../src/list/IMMetric.ts","../../src/list/IMMode.ts","../../src/list/IMMorphology.ts","../../src/list/IMModule.ts","../../src/list/IMNoise.ts","../../src/list/IMOrientation.ts","../../src/list/IMPixelChannel.ts","../../src/list/IMPixelIntensity.ts","../../src/list/IMPixelMask.ts","../../src/list/IMPixelTrait.ts","../../src/list/IMPolicyDomain.ts","../../src/list/IMPolicyRights.ts","../../src/list/IMPreview.ts","../../src/list/IMPrimitive.ts","../../src/list/IMQuantumFormat.ts","../../src/list/IMSparseColor.ts","../../src/list/IMStatistic.ts","../../src/list/IMStorage.ts","../../src/list/IMStretch.ts","../../src/list/IMStyle.ts","../../src/list/IMTool.ts","../../src/list/IMType.ts","../../src/list/IMUnits.ts","../../src/list/IMValidate.ts","../../src/list/IMVirtualPixel.ts","../../src/list/IMWeight.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","'use strict';\n\nconst pMap = (iterable, mapper, options) => new Promise((resolve, reject) => {\n\toptions = Object.assign({\n\t\tconcurrency: Infinity\n\t}, options);\n\n\tif (typeof mapper !== 'function') {\n\t\tthrow new TypeError('Mapper function is required');\n\t}\n\n\tconst {concurrency} = options;\n\n\tif (!(typeof concurrency === 'number' && concurrency >= 1)) {\n\t\tthrow new TypeError(`Expected \\`concurrency\\` to be a number from 1 and up, got \\`${concurrency}\\` (${typeof concurrency})`);\n\t}\n\n\tconst ret = [];\n\tconst iterator = iterable[Symbol.iterator]();\n\tlet isRejected = false;\n\tlet isIterableDone = false;\n\tlet resolvingCount = 0;\n\tlet currentIndex = 0;\n\n\tconst next = () => {\n\t\tif (isRejected) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextItem = iterator.next();\n\t\tconst i = currentIndex;\n\t\tcurrentIndex++;\n\n\t\tif (nextItem.done) {\n\t\t\tisIterableDone = true;\n\n\t\t\tif (resolvingCount === 0) {\n\t\t\t\tresolve(ret);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tresolvingCount++;\n\n\t\tPromise.resolve(nextItem.value)\n\t\t\t.then(element => mapper(element, i))\n\t\t\t.then(\n\t\t\t\tvalue => {\n\t\t\t\t\tret[i] = value;\n\t\t\t\t\tresolvingCount--;\n\t\t\t\t\tnext();\n\t\t\t\t},\n\t\t\t\terror => {\n\t\t\t\t\tisRejected = true;\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t);\n\t};\n\n\tfor (let i = 0; i < concurrency; i++) {\n\t\tnext();\n\n\t\tif (isIterableDone) {\n\t\t\tbreak;\n\t\t}\n\t}\n});\n\nmodule.exports = pMap;\nmodule.exports.default = pMap;\n","// internal misc utilities\n\nexport function values<T>(object: { [k: string]: T }): T[] {\n  return Object.keys(object).map(name => object[name])\n}\n\nexport function flat<T>(arr: T[][]): T[] {\n  return arr.reduce((a, b) => a.concat(b))\n}\n\n// export function trimNoNewLines(s: string): string {\n//   return s.replace(/^ +/, '').replace(/ +$/, '')\n// }\n","import { Command } from '..'\nimport { ExecuteCommand } from '../execute'\nimport { flat } from './misc'\n\n// TODO: store variables from text file output and reuse them. example:\n// `\n// color=$(convert filename.png -format \"%[pixel:p{0,0}]\" info:foo.txt)\n// convert filename.png -alpha off -bordercolor $color -border 1 \\\n//     \\( +clone -fuzz 30% -fill none -floodfill +0+0 $color \\\n//        -alpha extract -geometry 200% -blur 0x0.5 \\\n//        -morphology erode square:1 -geometry 50% \\) \\\n//     -compose CopyOpacity -composite -shave 1 outputfilename.png\n// `\n\n/**\n * Generates a valid command line command from given `string[]` command. Works with a single command.\n */\nfunction arrayToCliOne(command: Command): string {\n  return command\n    .map(c => c + '')\n\n    // if it contain spaces\n    .map(c => (c.trim().match(/\\s/)) ? `'${c}'` : c)\n\n    // escape parenthesis\n    .map(c => c.trim() === '(' ? '\\\\(' : c.trim() === ')' ? '\\\\)' : c)\n\n    .join(' ')\n}\n\n/**\n * Generates a valid command line string from given `string[]` that is compatible with  {@link call}. Works with multiple\n * commands by separating  them with new lines and support comand splitting in new lines using `\\`.\n * See {@link ExecuteCommand} for more information.\n */\nexport function arrayToCli(command: Command | Command[]): string {\n  const cmd = typeof command[0] === 'string' ? [command as Command] : command as Command[]\n  return cmd.map(arrayToCliOne).join('\\n')\n}\n\n/**\n * Generates a command in the form of array of strings, compatible with {@link call} from given command line string . The string must contain only one command (no newlines).\n */\nfunction cliToArrayOne(cliCommand: string): Command {\n  let inString = false\n  const spaceIndexes = [0]\n  for (let index = 0; index < cliCommand.length; index++) {\n    const c = cliCommand[index]\n    if (c.match(/[\\s]/im) && !inString) {\n      spaceIndexes.push(index)\n    }\n    if (c === `'`) {\n      inString = !inString\n    }\n  }\n  spaceIndexes.push(cliCommand.length)\n  const command = spaceIndexes\n    .map((spaceIndex, i) => cliCommand.substring(i === 0 ? 0 : spaceIndexes[i - 1], spaceIndexes[i]).trim())\n    .filter(s => !!s)\n\n    // remove quotes\n    .map(s => s.startsWith(`'`) ? s.substring(1, s.length) : s)\n    .map(s => s.endsWith(`'`) ? s.substring(0, s.length - 1) : s)\n\n    //  unescape parenthesis\n    .map(s => s === `\\\\(` ? `(` : s === `\\\\)` ? `)` : s)\n\n  return command\n}\n\n/**\n * Generates a command in the form of `string[][]` that is compatible with {@link call} from given command line string.\n * This works for strings containing multiple commands in different lines. and also respect `\\` character for continue the same\n * command in a new line. See {@link ExecuteCommand} for more information.\n */\nexport function cliToArray(cliCommand: string): Command[] {\n  const lines = cliCommand.split('\\n')\n    .map(s => s.trim()).map(cliToArrayOne)\n    .filter(a => a && a.length)\n  const result = []\n  let currentCommand: Command = []\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i]\n    if (line[line.length - 1] !== '\\\\') {\n      currentCommand = currentCommand.concat(line)\n      result.push(currentCommand)\n      currentCommand = []\n    }\n    else {\n      currentCommand = currentCommand.concat(line.slice(0, line.length - 1))\n    }\n  }\n  return result\n}\n\n/**\n * Makes sure that given {@link ExecuteCommand}, in whatever syntax, is transformed to the form `string[][]` that is compatible with {@link call}\n */\nexport function asCommand(c: ExecuteCommand): Command[] {\n  if (typeof c === 'string') { return asCommand([c]) }\n  if (!c[0]) { return [] }\n  if (typeof c[0] === 'string') {\n    return flat((c as string[]).map((subCommand: string) => cliToArray(subCommand)))\n  }\n  return c as Command[]\n}\n","import { MagickInputFile, MagickOutputFile, MagickFile } from '..'\nimport { execute } from '../execute'\n\nfunction blobToUint8Array(blob: Blob): Promise<Uint8Array> {\n  return new Promise(resolve => {\n    const fileReader = new FileReader()\n    fileReader.onload = event => {\n      const result = (event.target as any).result as ArrayBuffer\n      resolve(new Uint8Array(result))\n    }\n    fileReader.readAsArrayBuffer(blob)\n  })\n}\n\nexport function blobToString(blb: Blob): Promise<string> {\n  return new Promise(resolve => {\n    const reader = new FileReader()\n    reader.addEventListener('loadend', e => {\n      const text = (e.srcElement as any).result as string\n      resolve(text)\n    })\n    reader.readAsText(blb)\n  })\n}\n\nexport function isInputFile(file: MagickFile): file is MagickInputFile {\n  return !!(file as MagickInputFile).content\n}\nexport function isOutputFile(file: MagickFile): file is MagickOutputFile {\n  return !!(file as MagickOutputFile).blob\n}\n\nfunction uint8ArrayToString(arr: Uint8Array, charset: string = 'utf-8'): string {\n  return new TextDecoder(charset).decode(arr)\n}\n\n/**\n * Read files as string. Useful when files contains plain text like in the output file info.txt of `convert logo: -format '%[pixel:p{0,0}]' info:info.txt`\n */\nexport async function readFileAsText(file: MagickFile): Promise<string> {\n  if (isInputFile(file)) {\n    return uint8ArrayToString(file.content)\n  }\n  if (isOutputFile(file)) {\n    return await blobToString(file.blob)\n  }\n}\n\nexport async function isImage(file: MagickFile): Promise<boolean> {\n  const {exitCode} = await execute({inputFiles: [await asInputFile(file)], commands: `identify ${file.name}`})\n  return exitCode === 0\n}\n/**\n * Builds a new {@link MagickInputFile} by fetching the content of given url and optionally naming the file using given name\n * or extracting the file name from the url otherwise.\n */\nexport async function buildInputFile(url: string, name: string = getFileName(url)): Promise<MagickInputFile> {\n  const fetchedSourceImage = await fetch(url)\n  const arrayBuffer = await fetchedSourceImage.arrayBuffer()\n  const content = new Uint8Array(arrayBuffer)\n  return { name, content }\n}\n\nfunction uint8ArrayToBlob(arr: Uint8Array): Blob {\n  return new Blob([arr])\n}\n\nasync function outputFileToInputFile(file: MagickOutputFile, name: string = file.name): Promise<MagickInputFile> {\n  return {\n    name,\n    content: await blobToUint8Array(file.blob),\n  }\n}\n\nfunction inputFileToOutputFile(file: MagickInputFile, name: string = file.name): MagickOutputFile {\n  return {\n    name,\n    blob: uint8ArrayToBlob(file.content),\n  }\n}\n\nexport async function asInputFile(f: MagickFile, name: string = f.name): Promise<MagickInputFile> {\n  let inputFile: MagickInputFile\n  if (isOutputFile(f)) {\n    inputFile = await outputFileToInputFile(f)\n  }\n  else {\n    inputFile = f as MagickInputFile\n  }\n  inputFile.name = name\n  return inputFile\n}\n\nexport async function asOutputFile(f: MagickFile, name: string = f.name): Promise<MagickOutputFile> {\n  let outputFile: MagickOutputFile\n  if (isInputFile(f)) {\n    outputFile = inputFileToOutputFile(f)\n  }\n  else {\n    outputFile = f as MagickOutputFile\n  }\n  outputFile.name = name\n  return outputFile\n}\n\nexport function getFileName(url: string): string {\n  try {\n    return decodeURIComponent(new URL(url).pathname.split('/').pop())\n  } catch (error) {\n    const s = `http://foo.com/${url}`\n    try {\n      return decodeURIComponent(new URL(s).pathname.split('/').pop())\n    } catch (error) {\n      return url\n    }\n  }\n}\nexport function getFileNameExtension(filePathOrUrl: string) {\n  const s = getFileName(filePathOrUrl)\n  return s.substring(s.lastIndexOf('.') + 1, s.length)\n}\n","import { asInputFile, asOutputFile, execute, getFileNameExtension, MagickFile, MagickInputFile } from '..'\n\n// utilities related to HTML (img) elements\n\n/**\n * Will load given html img element src with the inline image content.\n * @param image the image to be loaded\n * @param el the html image element in which to load the image\n * @param forceBrowserSupport if true and the image extension is not supported by browsers, it will convert the image to png\n * and return that src so it can be shown in browsers\n */\nexport async function loadImageElement(image: MagickFile, el: HTMLImageElement, forceBrowserSupport: boolean = false) {\n  el.src = await buildImageSrc(image, forceBrowserSupport)\n}\n\n/**\n * Return a string with the inline image content, suitable to be used to assign to an html img src attribute. See {@link loadImageElement}.\n * @param forceBrowserSupport if true and the image extension is not supported by browsers, it will convert the image to png\n * and return that src so it can be shown in browsers\n */\nexport async function buildImageSrc(image: MagickFile, forceBrowserSupport: boolean = false): Promise<string> {\n  let img = image\n  const extension = getFileNameExtension(image.name)\n  if (!extension || forceBrowserSupport && browserSupportedImageExtensions.indexOf(extension) === -1) {\n    const { outputFiles } = await execute({ inputFiles: [await asInputFile(image)], commands: `convert ${image.name} output.png` })\n    outputFiles[0].name = image.name\n    img = outputFiles[0]\n  }\n  const outputFile = await asOutputFile(img)\n  return URL.createObjectURL(outputFile.blob)\n}\n/**\n * Build `MagickInputFile[]` from given HTMLInputElement of type=file that user may used to select several files\n */\nexport async function getInputFilesFromHtmlInputElement(el: HTMLInputElement): Promise<MagickInputFile[]> {\n  const files = await inputFileToUint8Array(el)\n  return files.map(f => ({ name: f.file.name, content: f.content }))\n}\n\nconst browserSupportedImageExtensions = ['gif', 'png', 'jpg', 'webp']\n\nfunction inputFileFiles(el: HTMLInputElement): File[] {\n  const files = []\n  for (let i = 0; i < el.files.length; i++) {\n    const file = el.files.item(i)\n    files.push(file)\n  }\n  return files\n}\n\nasync function inputFileToUint8Array(el: HTMLInputElement): Promise<{ file: File, content: Uint8Array }[]> {\n  return Promise.all(inputFileFiles(el).map(async file => {\n    const content = await new Promise<Uint8Array>(resolve => {\n      const reader = new FileReader()\n      reader.addEventListener('loadend', e => {\n        resolve(new Uint8Array(reader.result as any))\n      })\n      reader.readAsArrayBuffer(file)\n    })\n    return { file, content }\n  }))\n}\n","import pMap from 'p-map'\nimport { asInputFile, execute, extractInfo, MagickInputFile } from '..'\n\nlet builtInImages: MagickInputFile[]\nexport const builtInImageNames = ['rose:', 'logo:', 'wizard:', 'granite:', 'netscape:']\n\n/**\n * Gets ImageMagick built-in images like `rose:`, `logo:`, etc in the form of {@link MagickInputFile}s\n */\nexport async function getBuiltInImages(): Promise<MagickInputFile[]> {\n  if (!builtInImages) {\n    builtInImages = await pMap(builtInImageNames, async name => {\n      const info = await extractInfo(name)\n      const {outputFiles} = await execute({commands: `convert ${name} ${`output1.${info[0].image.format.toLowerCase()}`}`} )\n      outputFiles[0].name = name\n      return await asInputFile(outputFiles[0])\n    })\n  }\n  return builtInImages\n}\n\n/**\n * shortcut of {@link getBuiltInImages} to get a single image by name\n */\nexport async function getBuiltInImage(name: string): Promise<MagickInputFile> {\n  const images = await getBuiltInImages()\n  return images.find(f => f.name === name)\n}\n","import { MagickFile, executeAndReturnOutputFile, asInputFile } from '../'\nimport { readFileAsText } from './file'\n\nexport async function getPixelColor(img: MagickFile, x: number, y: number): Promise<string> {\n  const file = await executeAndReturnOutputFile({inputFiles: [await asInputFile(img)], commands: `convert ${img.name} -format '%[pixel:p{${x},${y}}]' info:info.txt`})\n  return await readFileAsText(file)\n}\n","import { asInputFile, Call, MagickFile, blobToString, MagickInputFile } from '..'\n\n/**\n * Compare the two images and return true if they are equal visually. Optionally, a margin of error can be provided using `fuzz`\n */\nexport async function compare(img1: MagickFile | string, img2: MagickFile | string, fuzz: number = 0.015): Promise<boolean> {\n  const identical = await compareNumber(img1, img2)\n  return identical <= fuzz\n}\n\nexport async function compareNumber(img1: MagickFile | string, img2: MagickFile | string): Promise<number> {\n  const imgs: MagickInputFile[] = []\n  let name1: string\n  let name2: string\n  if (typeof img1 !== 'string') {\n    const inputFile = await asInputFile(img1)\n    imgs.push(inputFile)\n    name1 = inputFile.name\n  }\n  else {\n    name1 = img1\n  }\n  if (typeof img2 !== 'string') {\n    const inputFile = await asInputFile(img2)\n    imgs.push(inputFile)\n    name2 = inputFile.name\n  }\n  else {\n    name2 = img2\n  }\n  const result = await Call(imgs,\n    ['convert', name1, name2, '-resize', '256x256^!', '-metric', 'RMSE', '-format', '%[distortion]', '-compare', 'info:info.txt'],\n  )\n  const n = await blobToString(result[0].blob)\n  return parseFloat(n)\n}\n","import { asInputFile, Call, MagickFile, blobToString, MagickInputFile } from '..'\nimport { ExtractInfoResult } from './imageExtractInfoTypes'\n\n/**\n * Execute `convert $IMG info.json` to extract image metadata. Returns the parsed info.json file contents\n * @param img could be a string in case you want to extract information about built in images like `rose:`\n */\nexport async function extractInfo(img: MagickFile|string): Promise<ExtractInfoResult[]> {\n\n  // TODO: support several input images - we are already returning an array\n\n  let name: string\n  let imgs: MagickInputFile[]\n  if (typeof img !== 'string') {\n    imgs = [await asInputFile(img)]\n    name = imgs[0].name\n  }\n  else {\n    name = img\n    imgs = []\n  }\n  const processedFiles = await Call(imgs, ['convert', name, 'info.json'])\n  try {\n    return JSON.parse(await blobToString(processedFiles[0].blob))\n  } catch (ex) {\n    return [{error: ex}]\n  }\n}\n","import { execute } from '../'\n\nexport async function getConfigureFolders(): Promise<string[]> {\n  const result = await execute(`convert -debug configure rose: info:`)\n  const contains = `Searching for configure file:`\n  const folders = result.stderr\n    .filter(line => line.includes(contains))\n    .map(line => line.substring(line.indexOf(contains) + contains.length, line.length))\n    .map(s => s.replace(/\\/\\//g, '/'))\n    .map(s => s.substring(0, s.lastIndexOf('/')))\n    .map(s => s.replace(/\"/g, '').trim())\n  return folders\n\n}\n\n// has some heuristic information regarding features (not) supported by wasm-imagemagick, for example, image formats\n\n// heads up - all images spec/assets/to_rotate.* where converted using gimp unless explicitly saying otherwise\n/**\n * list of image formats that are known to be supported by wasm-imagemagick. See `spec/formatSpec.ts`\n */\nexport const knownSupportedReadWriteImageFormats = [\n  'jpg', 'png',\n  'psd',\n  'tiff', 'xcf', 'gif', 'bmp', 'tga', 'miff', 'ico', 'dcm', 'xpm', 'pcx',\n  //  'pix', // gives error\n  'fits',\n  // 'djvu', // read only support\n  'ppm',\n  'pgm',\n  'pfm',\n  'mng',\n  'hdr',\n  'dds', // generated using convert -define \"dds:compression={dxt1, dxt5, none}\" to_rotate.png  to_rotate.dds\n  'otb', // generated using convert to_rotate.png  to_rotate.otb\n\n  'txt', // generated using convert to_rotate.png  to_rotate.txt\n\n  // 'rgb', // fails because  MustSpecifyImageSize `to_rotate.rgb'\n]\n","import { MagickInputFile, MagickOutputFile, call, asCommand } from '.'\nimport pMap from 'p-map'\nimport { CallResult } from './magickApi'\nimport { values } from './util/misc'\nimport { asInputFile } from './util'\n\nexport type Command = (string | number)[]\n\nexport interface ExecuteConfig {\n  inputFiles?: MagickInputFile[]\n  /**\n   */\n  commands: ExecuteCommand\n}\n\n/**\n *\n * Commands could have the following syntaxes:\n *  * array form like `[['convert', 'foo.png', 'bar.gif'], ['identify', 'bar.gif']]`\n *  * just one array: `['convert', 'foo.png', 'bar.gif']`\n *  * command line strings: `['convert foo.png bar.gif', 'idenfity bar.gif']`\n *  * just one string: `'convert foo.png bar.gif'`\n *\n * Also, for command line strings, multiple commands can be specified in the same string separating with new lines:\n *\n * ```js\n * const result = await execute(`\n *   convert rose: -sharpen 0x1 reconstruct.jpg\n *   compare rose: reconstruct.jpg difference.png\n *   compare -compose src rose: reconstruct.jpg difference.png\n * `)\n * ```\n *\n * Also, command line strings support breaking the same command in multiple lines by using `\\` like in:\n *\n * ```js\n * const result = await execute(`\n *   convert -size 250x100 xc: +noise Random -channel R -threshold .4% \\\\\n *     -negate -channel RG -separate +channel \\\\\n *     \\( +clone \\) -compose multiply -flatten \\\\\n *     -virtual-pixel Tile -background Black \\\\\n *     -blur 0x.6 -motion-blur 0x15-90 -normalize \\\\\n *     +distort Polar 0 +repage 'star inward.gif'\n * `)\n * ```\n *\n * If you need to escape arguments like file names with spaces, use single quotes `'`, like the output file in the previous example `'star inward.gif'`\n */\nexport type ExecuteCommand = Command[] | Command | string\n\nexport interface ExecuteResultOne extends CallResult {\n  errors: any[]\n  exitCode: number\n}\n\n/**\n * Execute first command in given config.\n */\nexport async function executeOne(configOrCommand: ExecuteConfig | ExecuteCommand): Promise<ExecuteResultOne> {\n  const config = asExecuteConfig(configOrCommand)\n  let result: CallResult = {\n    stderr: [],\n    stdout: [],\n    outputFiles: [],\n    exitCode: 1,\n  }\n  try {\n    config.inputFiles = config.inputFiles || []\n    const command = asCommand(config.commands)[0]\n    const t0 = performance.now()\n    executeListeners.forEach(listener => listener.beforeExecute({ command, took: performance.now() - t0, id: t0 }))\n    result = await call(config.inputFiles, command.map(c => c + ''))\n    executeListeners.forEach(listener => listener.afterExecute({ command, took: performance.now() - t0, id: t0 }))\n    if (result.exitCode) {\n      return { ...result, errors: ['exit code: ' + result.exitCode + ' stderr: ' + result.stderr.join('\\n')] }\n    }\n    return { ...result, errors: [undefined] }\n\n  } catch (error) {\n    return { ...result, errors: [error + ', exit code: ' + result.exitCode + ', stderr: ' + result.stderr.join('\\n')] }\n  }\n}\n\nexport function isExecuteCommand(arg: any): arg is ExecuteConfig {\n  return !!arg.commands\n}\n\n/**\n * Transform  `configOrCommand: ExecuteConfig | ExecuteCommand` to a valid ExecuteConfig object\n */\nexport function asExecuteConfig(arg: ExecuteConfig | ExecuteCommand): ExecuteConfig {\n  if (isExecuteCommand(arg)) {\n    return arg\n  }\n  return {\n    inputFiles: [],\n    commands: arg,\n  }\n}\n\n/**\n * `execute()` shortcut that useful for commands that return only one output file or when only one particular output file is relevant.\n * @param outputFileName optionally user can give the desired output file name\n * @returns If `outputFileName` is given the file with that name, the first output file otherwise or undefined\n * if no file match, or no output files where generated (like in an error).\n */\nexport async function executeAndReturnOutputFile(configOrCommand: ExecuteConfig | ExecuteCommand, outputFileName?: string): Promise<MagickOutputFile | undefined> {\n  const config = asExecuteConfig(configOrCommand)\n  const result = await execute(config)\n  return outputFileName ? result.outputFiles.find(f => f.name === outputFileName) : (result.outputFiles.length && result.outputFiles[0] || undefined)\n}\n\n// execute event emitter\n\nexport interface ExecuteEvent {\n  command: Command\n  took: number\n  id: number\n}\n\nexport interface ExecuteListener {\n  afterExecute?(event: ExecuteEvent): void\n  beforeExecute?(event: ExecuteEvent): void\n}\n\nconst executeListeners: ExecuteListener[] = []\n\nexport function addExecuteListener(l: ExecuteListener) {\n  executeListeners.push(l)\n}\n\nexport interface ExecuteResult extends ExecuteResultOne {\n  results: ExecuteResultOne[]\n  // breakOnError?: boolean\n}\n\n/**\n * Execute all commands in given config serially in order. Output files from a command become available as\n * input files in next commands. In the following example we execute two commands. Notice how the second one uses `image2.png` which was the output file of the first one:\n *\n * ```ts\n * const { outputFiles, exitCode, stderr} = await execute({\n *   inputFiles: [await buildInputFile('fn.png', 'image1.png')],\n *   commands: `\n *     convert image1.png -bordercolor #ffee44 -background #eeff55 +polaroid image2.png\n *     convert image2.png -fill #997711 -tint 55 image3.jpg\n * `\n * })\n * if (exitCode) {\n *   alert(`There was an error with the command: ${stderr.join('\\n')}`)\n * }\n * else {\n *   await loadImageElement(outputFiles.find(f => f.name==='image3.jpg'), document.getElementById('outputImage'))\n * }\n * ```\n *\n * See {@link ExecuteCommand} for different command syntax supported.\n *\n * See {@link ExecuteResult} for details on the object returned\n */\n\nexport async function execute(configOrCommand: ExecuteConfig | ExecuteCommand): Promise<ExecuteResult> {\n  const config = asExecuteConfig(configOrCommand)\n  config.inputFiles = config.inputFiles || []\n  const allOutputFiles: { [name: string]: MagickOutputFile } = {}\n  const allInputFiles: { [name: string]: MagickInputFile } = {}\n  config.inputFiles.forEach(f => {\n    allInputFiles[f.name] = f\n  })\n  let allErrors = []\n  const results: ExecuteResultOne[] = []\n  let allStdout = []\n  let allStderr = []\n  async function mapper(c: Command) {\n    const thisConfig = {\n      inputFiles: values(allInputFiles),\n      commands: [c],\n    }\n    const result = await executeOne(thisConfig)\n    results.push(result)\n    allErrors = allErrors.concat(result.errors || [])\n    allStdout = allStdout.concat(result.stdout || [])\n    allStderr = allStderr.concat(result.stderr || [])\n    await pMap(result.outputFiles, async f => {\n      allOutputFiles[f.name] = f\n      const inputFile = await asInputFile(f)\n      allInputFiles[inputFile.name] = inputFile\n    })\n  }\n  const commands = asCommand(config.commands)\n  await pMap(commands, mapper, { concurrency: 1 })\n  const resultWithError = results.find(r => r.exitCode !== 0)\n  return {\n    outputFiles: values(allOutputFiles),\n    errors: allErrors,\n    results,\n    stdout: allStdout,\n    stderr: allStderr,\n    exitCode: resultWithError ? resultWithError.exitCode : 0,\n  }\n}\n","import { MagickInputFile, MagickFile, asInputFile, getBuiltInImages } from '.'\nimport pMap from 'p-map'\nimport { values } from './util/misc'\n\n/**\n * Manager for `MagickFiles`.\n */\nexport interface ImageHome {\n  /**\n   * Get a file by name.\n   */\n  get(name: string): Promise<MagickInputFile>\n\n  /**\n   * Programmatically add new files.\n   */\n  register(file: MagickFile, name?: string): void\n  isRegistered(name: string): boolean\n  /**\n   * Get all the files currently available in this context.\n   */\n  getAll(): Promise<MagickInputFile[]>\n  /**\n   * Add ImageMagick built-in images like `rose:`, `logo:`, etc to this execution context so they are present in `getAll()`.\n   */\n  addBuiltInImages(): Promise<void>\n  /**\n   * Remove files by name.\n   * @returns the files actually removed.\n   */\n  remove(names: string[]): MagickInputFile[]\n}\n\ntype MagickInputFilePromise = Promise<MagickInputFile> & { resolved: true }\n\nclass ImageHomeImpl implements ImageHome {\n\n  private images: { [name: string]: MagickInputFilePromise } = {}\n  private builtInImagesAdded: boolean = false\n\n  get(name: string): Promise<MagickInputFile> {\n    return this.images[name]\n  }\n\n  remove(names: string[]): MagickInputFile[] {\n    const result = []\n    Object.keys(this.images).forEach(name => {\n      if (names.indexOf(name) !== -1) {\n        result.push(this.images[name])\n        delete this.images[name]\n      }\n    })\n    return result\n  }\n\n  async getAll(): Promise<MagickInputFile[]> {\n    return await Promise.all(values(this.images))\n  }\n\n  register(file: MagickFile, name: string = file.name): MagickInputFilePromise {\n    const promise = asInputFile(file) as MagickInputFilePromise\n    this.images[name] = promise\n    this.images[name].then(() => {\n      promise.resolved = true\n    })\n    return promise\n  }\n\n  isRegistered(name: string, andReady: boolean = true): boolean {\n    return this.images[name] && (andReady && this.images[name].resolved)\n  }\n\n  async addBuiltInImages() {\n    if (!this.builtInImagesAdded) {\n      await pMap(await getBuiltInImages(), img => this.register(img))\n      this.builtInImagesAdded = true\n    }\n  }\n\n}\nexport function createImageHome() { return new ImageHomeImpl() }\n","import { createImageHome, execute, ExecuteCommand, ExecuteConfig, ExecuteResult, ImageHome, MagickFile, MagickInputFile } from '.'\nimport { asExecuteConfig } from './execute'\n\n/**\n * Allow multiple execute() calls remembering previous execute() generated output files and previous given input files that\n * can be used as input files in next calls.\n */\nexport interface ExecutionContext {\n  /**\n   * This behaves almost the same as [execute](https://github.com/KnicKnic/WASM-ImageMagick/tree/master/apidocs#execute).\n   */\n  execute(configOrCommands: ExecuteConfig | ExecuteCommand | string): Promise<ExecuteResult>\n\n  /**\n   * Programmatically add new files so they are available if following `execute()` calls.\n   */\n  addFiles(files: MagickFile[]): void\n\n  /**\n   * Get all the files currently available in this context.\n   */\n  getAllFiles(): Promise<MagickInputFile[]>\n\n  /**\n   * Add ImageMagick built-in images like `rose:`, `logo:`, etc to this execution context so they are present in `getAllFiles()`.\n   */\n  addBuiltInImages(): Promise<void>\n\n  /**\n   * Get a file by name or undefined if none.\n   */\n  getFile(name: string): Promise<MagickInputFile|undefined>\n\n  /**\n   * Remove files by name.\n   * @returns the files actually removed.\n   */\n  removeFiles(names: string[]): MagickInputFile[]\n}\n\nclass ExecutionContextImpl implements ExecutionContext {\n\n  constructor(private imageHome: ImageHome = createImageHome()) {\n  }\n\n  async execute(configOrCommands: ExecuteConfig | ExecuteCommand | string): Promise<ExecuteResult> {\n    const config = asExecuteConfig(configOrCommands)\n    config.inputFiles.forEach(f => {\n      this.imageHome.register(f)\n    })\n    const inputFiles = await this.imageHome.getAll()\n    const result = await execute({ ...config, inputFiles })\n    result.outputFiles.forEach(f => {\n      this.imageHome.register(f)\n    })\n    return result\n  }\n\n  addFiles(files: MagickFile[]) {\n    files.forEach(f => this.imageHome.register(f))\n  }\n\n  async getAllFiles(): Promise<MagickInputFile[]> {\n    return await this.imageHome.getAll()\n  }\n\n  async getFile(name: string): Promise<MagickInputFile> {\n    return await this.imageHome.get(name)\n  }\n\n  async addBuiltInImages() {\n    return this.imageHome.addBuiltInImages()\n  }\n\n  removeFiles(names: string[]): MagickInputFile[] {\n    return this.imageHome.remove(names)\n  }\n\n  static create(inheritFrom?: ExecutionContext) {\n    if (inheritFrom && !(inheritFrom as ExecutionContextImpl).imageHome) {\n      throw new Error('Dont know how to inherit from other ExecutionContext implementation than this one')\n    }\n    return new ExecutionContextImpl(inheritFrom && (inheritFrom as ExecutionContextImpl).imageHome)\n  }\n\n}\n\nexport function newExecutionContext(inheritFrom?: ExecutionContext): ExecutionContext {\n  return ExecutionContextImpl.create(inheritFrom)\n}\n","/**\r\n * Base class for ImageMagick input and output files.\r\n */\r\nexport interface MagickFile {\r\n  name: string\r\n}\r\n\r\n/**\r\n * Represents output files generated when an ImageMagick command executes.\r\n */\r\nexport interface MagickOutputFile extends MagickFile {\r\n  blob: Blob\r\n}\r\n\r\n/**\r\n * Represents input files that need to be provided to {@link call} or [execute](https://github.com/KnicKnic/WASM-ImageMagick/tree/master/apidocs#execute).\r\n *\r\n * Can be builded using {@link buildInputFile}\r\n */\r\nexport interface MagickInputFile extends MagickFile {\r\n  content: Uint8Array\r\n}\r\n\r\n/**\r\n * {@link call} shortcut that only returns the output files.\r\n */\r\nexport async function Call(inputFiles: MagickInputFile[], command: string[]): Promise<MagickOutputFile[]> {\r\n  const result = await call(inputFiles, command)\r\n  return result.outputFiles\r\n}\r\n\r\n/**\r\n * The result of calling {@link call}. Also the base class of results of calling [execute](https://github.com/KnicKnic/WASM-ImageMagick/tree/master/apidocs#execute).\r\n */\r\nexport interface CallResult {\r\n  /**\r\n   * Output files generated by the command, if any\r\n   */\r\n  outputFiles: MagickOutputFile[]\r\n  /**\r\n   * Output printed by the command to stdout. For example the command `identify rose:` will print useful information to stdout\r\n   */\r\n  stdout: string[]\r\n  /**\r\n   * Output printed by the command to stderr. If `exitCode != 0` then this property could have some information about the error.\r\n   */\r\n  stderr: string[]\r\n  /**\r\n   * Exit code of the command executed. If 0 the command executed successfully, otherwise an error occurred and `stderr` could have some information about what was wrong\r\n   */\r\n  exitCode: number\r\n}\r\n\r\n/**\r\n * Low level execution function. All the other functions like [execute](https://github.com/KnicKnic/WASM-ImageMagick/tree/master/apidocs#execute)\r\n * ends up calling this one. It accept only one command and only in the form of array of strings.\r\n */\r\nexport function call(inputFiles: MagickInputFile[], command: string[]): Promise<CallResult> {\r\n  const request = {\r\n    files: inputFiles,\r\n    args: command,\r\n    requestNumber: magickWorkerPromisesKey,\r\n  }\r\n  const promise = CreatePromiseEvent()\r\n  magickWorkerPromises[magickWorkerPromisesKey] = promise\r\n  magickWorker.postMessage(request)\r\n  magickWorkerPromisesKey++\r\n  return promise as Promise<CallResult>\r\n}\r\n\r\nfunction CreatePromiseEvent() {\r\n  let resolver\r\n  let rejecter\r\n  const emptyPromise = new Promise((resolve, reject) => {\r\n    resolver = resolve\r\n    rejecter = reject\r\n  }) as Promise<{}> & { resolve?: any, reject?: any }\r\n  emptyPromise.resolve = resolver\r\n  emptyPromise.reject = rejecter\r\n  return emptyPromise\r\n}\r\n\r\nconst magickWorker = new Worker('magick.js')\r\n\r\nconst magickWorkerPromises = {}\r\nlet magickWorkerPromisesKey = 1\r\n\r\n// handle responses as they stream in after being outputFiles by image magick\r\nmagickWorker.onmessage = e => {\r\n  const response = e.data\r\n  const promise = magickWorkerPromises[response.requestNumber]\r\n  delete magickWorkerPromises[response.requestNumber]\r\n  const result = {\r\n    outputFiles: response.outputFiles,\r\n    stdout: response.stdout,\r\n    stderr: response.stderr,\r\n    exitCode: response.exitCode || 0,\r\n  }\r\n  promise.resolve(result)\r\n}\r\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMAlign {\n  'Center' = 'Center',\n  'End' = 'End',\n  'Left' = 'Left',\n  'Middle' = 'Middle',\n  'Right' = 'Right',\n  'Start' = 'Start',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMAlpha {\n  'Activate' = 'Activate',\n  'Associate' = 'Associate',\n  'Background' = 'Background',\n  'Copy' = 'Copy',\n  'Deactivate' = 'Deactivate',\n  'Discrete' = 'Discrete',\n  'Disassociate' = 'Disassociate',\n  'Extract' = 'Extract',\n  'Off' = 'Off',\n  'On' = 'On',\n  'Opaque' = 'Opaque',\n  'Remove' = 'Remove',\n  'Set' = 'Set',\n  'Shape' = 'Shape',\n  'Transparent' = 'Transparent',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMAutoThreshold {\n  'Kapur' = 'Kapur',\n  'OTSU' = 'OTSU',\n  'Triangle' = 'Triangle',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMBoolean {\n  'False' = 'False',\n  'True' = 'True',\n  '0_' = '0',\n  '1_' = '1',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMCache {\n  'Disk' = 'Disk',\n  'Distributed' = 'Distributed',\n  'Map' = 'Map',\n  'Memory' = 'Memory',\n  'Ping' = 'Ping',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMChannel {\n  'All' = 'All',\n  'Sync' = 'Sync',\n  'Default' = 'Default',\n  'A' = 'A',\n  'Alpha' = 'Alpha',\n  'Black' = 'Black',\n  'B' = 'B',\n  'Blue' = 'Blue',\n  'C' = 'C',\n  'Chroma' = 'Chroma',\n  'Cyan' = 'Cyan',\n  'Gray' = 'Gray',\n  'G' = 'G',\n  'Green' = 'Green',\n  'H' = 'H',\n  'Hue' = 'Hue',\n  'K' = 'K',\n  'L' = 'L',\n  'Lightness' = 'Lightness',\n  'Luminance' = 'Luminance',\n  'M' = 'M',\n  'Magenta' = 'Magenta',\n  'Meta' = 'Meta',\n  'R' = 'R',\n  'Red' = 'Red',\n  'S' = 'S',\n  'Saturation' = 'Saturation',\n  'Y' = 'Y',\n  'Yellow' = 'Yellow',\n  '0_' = '0',\n  '1_' = '1',\n  '2_' = '2',\n  '3_' = '3',\n  '4_' = '4',\n  '5_' = '5',\n  '6_' = '6',\n  '7_' = '7',\n  '8_' = '8',\n  '9_' = '9',\n  '10_' = '10',\n  '11_' = '11',\n  '12_' = '12',\n  '13_' = '13',\n  '14_' = '14',\n  '15_' = '15',\n  '16_' = '16',\n  '17_' = '17',\n  '18_' = '18',\n  '19_' = '19',\n  '20_' = '20',\n  '21_' = '21',\n  '22_' = '22',\n  '23_' = '23',\n  '24_' = '24',\n  '25_' = '25',\n  '26_' = '26',\n  '27_' = '27',\n  '28_' = '28',\n  '29_' = '29',\n  '30_' = '30',\n  '31_' = '31',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMClass {\n  'DirectClass' = 'DirectClass',\n  'PseudoClass' = 'PseudoClass',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMClipPath {\n  'ObjectBoundingBox' = 'ObjectBoundingBox',\n  'UserSpace' = 'UserSpace',\n  'UserSpaceOnUse' = 'UserSpaceOnUse',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMColorspace {\n  'CIELab' = 'CIELab',\n  'CMY' = 'CMY',\n  'CMYK' = 'CMYK',\n  'Gray' = 'Gray',\n  'HCL' = 'HCL',\n  'HCLp' = 'HCLp',\n  'HSB' = 'HSB',\n  'HSI' = 'HSI',\n  'HSL' = 'HSL',\n  'HSV' = 'HSV',\n  'HWB' = 'HWB',\n  'Lab' = 'Lab',\n  'LCH' = 'LCH',\n  'LCHab' = 'LCHab',\n  'LCHuv' = 'LCHuv',\n  'LinearGray' = 'LinearGray',\n  'LMS' = 'LMS',\n  'Log' = 'Log',\n  'Luv' = 'Luv',\n  'OHTA' = 'OHTA',\n  'Rec601YCbCr' = 'Rec601YCbCr',\n  'Rec709YCbCr' = 'Rec709YCbCr',\n  'RGB' = 'RGB',\n  'scRGB' = 'scRGB',\n  'sRGB' = 'sRGB',\n  'Transparent' = 'Transparent',\n  'xyY' = 'xyY',\n  'XYZ' = 'XYZ',\n  'YCbCr' = 'YCbCr',\n  'YDbDr' = 'YDbDr',\n  'YCC' = 'YCC',\n  'YIQ' = 'YIQ',\n  'YPbPr' = 'YPbPr',\n  'YUV' = 'YUV',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMCommand {\n  '-alpha' = '-alpha',\n  '+background' = '+background',\n  '-background' = '-background',\n  '+format' = '+format',\n  '-format' = '-format',\n  '-quiet' = '-quiet',\n  '+quiet' = '+quiet',\n  '-regard-warnings' = '-regard-warnings',\n  '+regard-warnings' = '+regard-warnings',\n  '+repage' = '+repage',\n  '-repage' = '-repage',\n  '+size' = '+size',\n  '-size' = '-size',\n  '+virtual-pixel' = '+virtual-pixel',\n  '-virtual-pixel' = '-virtual-pixel',\n  '-blur' = '-blur',\n  '-resize' = '-resize',\n  '-adaptive-blur' = '-adaptive-blur',\n  '-adaptive-resize' = '-adaptive-resize',\n  '-adaptive-sharpen' = '-adaptive-sharpen',\n  '-adjoin' = '-adjoin',\n  '+adjoin' = '+adjoin',\n  '+mattecolor' = '+mattecolor',\n  '-mattecolor' = '-mattecolor',\n  '-annotate' = '-annotate',\n  '-antialias' = '-antialias',\n  '+antialias' = '+antialias',\n  '-append' = '-append',\n  '+append' = '+append',\n  '+attenuate' = '+attenuate',\n  '-attenuate' = '-attenuate',\n  '+authenticate' = '+authenticate',\n  '-authenticate' = '-authenticate',\n  '-auto-gamma' = '-auto-gamma',\n  '-auto-level' = '-auto-level',\n  '-auto-orient' = '-auto-orient',\n  '-auto-threshold' = '-auto-threshold',\n  '+backdrop' = '+backdrop',\n  '-backdrop' = '-backdrop',\n  '-bench' = '-bench',\n  '+bias' = '+bias',\n  '-bias' = '-bias',\n  '-black-point-compensation' = '-black-point-compensation',\n  '+black-point-compensation' = '+black-point-compensation',\n  '-black-threshold' = '-black-threshold',\n  '+blend' = '+blend',\n  '-blend' = '-blend',\n  '+blue-primary' = '+blue-primary',\n  '-blue-primary' = '-blue-primary',\n  '-blue-shift' = '-blue-shift',\n  '+blue-shift' = '+blue-shift',\n  '-border' = '-border',\n  '+bordercolor' = '+bordercolor',\n  '-bordercolor' = '-bordercolor',\n  '+borderwidth' = '+borderwidth',\n  '-borderwidth' = '-borderwidth',\n  '-brightness-contrast' = '-brightness-contrast',\n  '+cache' = '+cache',\n  '-cache' = '-cache',\n  '+caption' = '+caption',\n  '-caption' = '-caption',\n  '-cdl' = '-cdl',\n  '+channel' = '+channel',\n  '-channel' = '-channel',\n  '-channel-fx' = '-channel-fx',\n  '-charcoal' = '-charcoal',\n  '-chop' = '-chop',\n  '-clamp' = '-clamp',\n  '-clip' = '-clip',\n  '+clip' = '+clip',\n  '+clip-mask' = '+clip-mask',\n  '-clip-mask' = '-clip-mask',\n  '-clip-path' = '-clip-path',\n  '+clip-path' = '+clip-path',\n  '+clone' = '+clone',\n  '-clone' = '-clone',\n  '-clut' = '-clut',\n  '-coalesce' = '-coalesce',\n  '-colorize' = '-colorize',\n  '+colormap' = '+colormap',\n  '-colormap' = '-colormap',\n  '-color-matrix' = '-color-matrix',\n  '-colors' = '-colors',\n  '+colorspace' = '+colorspace',\n  '-colorspace' = '-colorspace',\n  '-combine' = '-combine',\n  '+combine' = '+combine',\n  '+comment' = '+comment',\n  '-comment' = '-comment',\n  '-compare' = '-compare',\n  '-complex' = '-complex',\n  '+compose' = '+compose',\n  '-compose' = '-compose',\n  '-composite' = '-composite',\n  '+compress' = '+compress',\n  '-compress' = '-compress',\n  '-concurrent' = '-concurrent',\n  '-connected-components' = '-connected-components',\n  '-contrast-stretch' = '-contrast-stretch',\n  '-convolve' = '-convolve',\n  '-copy' = '-copy',\n  '-crop' = '-crop',\n  '-cycle' = '-cycle',\n  '+debug' = '+debug',\n  '-debug' = '-debug',\n  '-decipher' = '-decipher',\n  '-define' = '-define',\n  '+define' = '+define',\n  '+delay' = '+delay',\n  '-delay' = '-delay',\n  '+delete' = '+delete',\n  '-delete' = '-delete',\n  '+density' = '+density',\n  '-density' = '-density',\n  '+depth' = '+depth',\n  '-depth' = '-depth',\n  '+descend' = '+descend',\n  '-descend' = '-descend',\n  '+deskew' = '+deskew',\n  '-deskew' = '-deskew',\n  '-despeckle' = '-despeckle',\n  '+direction' = '+direction',\n  '-direction' = '-direction',\n  '+displace' = '+displace',\n  '-displace' = '-displace',\n  '-display' = '-display',\n  '+display' = '+display',\n  '+dispose' = '+dispose',\n  '-dispose' = '-dispose',\n  '+dissimilarity-threshold' = '+dissimilarity-threshold',\n  '-dissimilarity-threshold' = '-dissimilarity-threshold',\n  '+dissolve' = '+dissolve',\n  '-dissolve' = '-dissolve',\n  '-distort' = '-distort',\n  '+distort' = '+distort',\n  '+dither' = '+dither',\n  '-dither' = '-dither',\n  '-draw' = '-draw',\n  '+duplicate' = '+duplicate',\n  '-duplicate' = '-duplicate',\n  '-duration' = '-duration',\n  '+duration' = '+duration',\n  '-edge' = '-edge',\n  '-emboss' = '-emboss',\n  '-encipher' = '-encipher',\n  '+encoding' = '+encoding',\n  '-encoding' = '-encoding',\n  '+endian' = '+endian',\n  '-endian' = '-endian',\n  '-enhance' = '-enhance',\n  '-equalize' = '-equalize',\n  '-evaluate' = '-evaluate',\n  '-evaluate-sequence' = '-evaluate-sequence',\n  '-exit' = '-exit',\n  '-extent' = '-extent',\n  '+extract' = '+extract',\n  '-extract' = '-extract',\n  '-family' = '-family',\n  '+features' = '+features',\n  '-features' = '-features',\n  '-fft' = '-fft',\n  '+fft' = '+fft',\n  '+fill' = '+fill',\n  '-fill' = '-fill',\n  '+filter' = '+filter',\n  '-filter' = '-filter',\n  '-flatten' = '-flatten',\n  '-flip' = '-flip',\n  '-floodfill' = '-floodfill',\n  '+floodfill' = '+floodfill',\n  '-flop' = '-flop',\n  '+font' = '+font',\n  '-font' = '-font',\n  '+foreground' = '+foreground',\n  '-foreground' = '-foreground',\n  '-frame' = '-frame',\n  '-function' = '-function',\n  '+fuzz' = '+fuzz',\n  '-fuzz' = '-fuzz',\n  '-fx' = '-fx',\n  '-gamma' = '-gamma',\n  '+gamma' = '+gamma',\n  '-gaussian-blur' = '-gaussian-blur',\n  '+geometry' = '+geometry',\n  '-geometry' = '-geometry',\n  '+gravity' = '+gravity',\n  '-gravity' = '-gravity',\n  '-grayscale' = '-grayscale',\n  '+green-primary' = '+green-primary',\n  '-green-primary' = '-green-primary',\n  '-hald-clut' = '-hald-clut',\n  '+highlight-color' = '+highlight-color',\n  '-highlight-color' = '-highlight-color',\n  '+iconGeometry' = '+iconGeometry',\n  '-iconGeometry' = '-iconGeometry',\n  '-iconic' = '-iconic',\n  '+iconic' = '+iconic',\n  '-identify' = '-identify',\n  '-ift' = '-ift',\n  '+ift' = '+ift',\n  '-immutable' = '-immutable',\n  '+immutable' = '+immutable',\n  '-implode' = '-implode',\n  '+insert' = '+insert',\n  '-insert' = '-insert',\n  '+intensity' = '+intensity',\n  '-intensity' = '-intensity',\n  '+intent' = '+intent',\n  '-intent' = '-intent',\n  '+interlace' = '+interlace',\n  '-interlace' = '-interlace',\n  '+interline-spacing' = '+interline-spacing',\n  '-interline-spacing' = '-interline-spacing',\n  '+interpolate' = '+interpolate',\n  '-interpolate' = '-interpolate',\n  '-interpolative-resize' = '-interpolative-resize',\n  '+interword-spacing' = '+interword-spacing',\n  '-interword-spacing' = '-interword-spacing',\n  '+kerning' = '+kerning',\n  '-kerning' = '-kerning',\n  '-kuwahara' = '-kuwahara',\n  '+label' = '+label',\n  '-label' = '-label',\n  '-lat' = '-lat',\n  '-layers' = '-layers',\n  '-level' = '-level',\n  '+level' = '+level',\n  '-level-colors' = '-level-colors',\n  '+level-colors' = '+level-colors',\n  '-limit' = '-limit',\n  '-linear-stretch' = '-linear-stretch',\n  '-liquid-rescale' = '-liquid-rescale',\n  '-list' = '-list',\n  '-local-contrast' = '-local-contrast',\n  '+log' = '+log',\n  '-log' = '-log',\n  '+loop' = '+loop',\n  '-loop' = '-loop',\n  '+lowlight-color' = '+lowlight-color',\n  '-lowlight-color' = '-lowlight-color',\n  '-magnify' = '-magnify',\n  '+mask' = '+mask',\n  '-mask' = '-mask',\n  '+metric' = '+metric',\n  '-metric' = '-metric',\n  '+mode' = '+mode',\n  '-modulate' = '-modulate',\n  '-moments' = '-moments',\n  '+moments' = '+moments',\n  '-monitor' = '-monitor',\n  '+monitor' = '+monitor',\n  '+monochrome' = '+monochrome',\n  '-monochrome' = '-monochrome',\n  '-morph' = '-morph',\n  '-morphology' = '-morphology',\n  '-mosaic' = '-mosaic',\n  '-motion-blur' = '-motion-blur',\n  '+name' = '+name',\n  '-name' = '-name',\n  '+negate' = '+negate',\n  '-negate' = '-negate',\n  '-noise' = '-noise',\n  '+noise' = '+noise',\n  '-noop' = '-noop',\n  '-normalize' = '-normalize',\n  '-opaque' = '-opaque',\n  '+opaque' = '+opaque',\n  '-ordered-dither' = '-ordered-dither',\n  '+orient' = '+orient',\n  '-orient' = '-orient',\n  '+page' = '+page',\n  '-page' = '-page',\n  '-paint' = '-paint',\n  '+path' = '+path',\n  '-path' = '-path',\n  '+pause' = '+pause',\n  '-pause' = '-pause',\n  '-ping' = '-ping',\n  '+ping' = '+ping',\n  '+pointsize' = '+pointsize',\n  '-pointsize' = '-pointsize',\n  '+polaroid' = '+polaroid',\n  '-polaroid' = '-polaroid',\n  '-poly' = '-poly',\n  '-posterize' = '-posterize',\n  '+precision' = '+precision',\n  '-precision' = '-precision',\n  '-preview' = '-preview',\n  '-print' = '-print',\n  '-process' = '-process',\n  '+profile' = '+profile',\n  '-profile' = '-profile',\n  '+quality' = '+quality',\n  '-quality' = '-quality',\n  '+quantize' = '+quantize',\n  '-quantize' = '-quantize',\n  '-raise' = '-raise',\n  '+raise' = '+raise',\n  '-random-threshold' = '-random-threshold',\n  '-range-threshold' = '-range-threshold',\n  '-read' = '-read',\n  '+read-mask' = '+read-mask',\n  '-read-mask' = '-read-mask',\n  '+red-primary' = '+red-primary',\n  '-red-primary' = '-red-primary',\n  '+region' = '+region',\n  '-region' = '-region',\n  '+remap' = '+remap',\n  '-remap' = '-remap',\n  '+remote' = '+remote',\n  '-remote' = '-remote',\n  '-render' = '-render',\n  '+render' = '+render',\n  '-resample' = '-resample',\n  '-respect-parenthesis' = '-respect-parenthesis',\n  '+respect-parenthesis' = '+respect-parenthesis',\n  '-reverse' = '-reverse',\n  '-roll' = '-roll',\n  '-rotate' = '-rotate',\n  '-rotational-blur' = '-rotational-blur',\n  '-sample' = '-sample',\n  '+sampling-factor' = '+sampling-factor',\n  '-sampling-factor' = '-sampling-factor',\n  '-scale' = '-scale',\n  '+scene' = '+scene',\n  '-scene' = '-scene',\n  '+scenes' = '+scenes',\n  '-scenes' = '-scenes',\n  '+screen' = '+screen',\n  '-screen' = '-screen',\n  '-script' = '-script',\n  '+seed' = '+seed',\n  '-seed' = '-seed',\n  '-segment' = '-segment',\n  '-selective-blur' = '-selective-blur',\n  '-separate' = '-separate',\n  '-sepia-tone' = '-sepia-tone',\n  '+set' = '+set',\n  '-set' = '-set',\n  '-shade' = '-shade',\n  '-shadow' = '-shadow',\n  '+shared-memory' = '+shared-memory',\n  '-shared-memory' = '-shared-memory',\n  '-sharpen' = '-sharpen',\n  '-shave' = '-shave',\n  '-shear' = '-shear',\n  '-sigmoidal-contrast' = '-sigmoidal-contrast',\n  '+sigmoidal-contrast' = '+sigmoidal-contrast',\n  '+silent' = '+silent',\n  '-silent' = '-silent',\n  '+similarity-threshold' = '+similarity-threshold',\n  '-similarity-threshold' = '-similarity-threshold',\n  '-sketch' = '-sketch',\n  '-smush' = '-smush',\n  '+smush' = '+smush',\n  '+snaps' = '+snaps',\n  '-snaps' = '-snaps',\n  '-solarize' = '-solarize',\n  '-sparse-color' = '-sparse-color',\n  '-splice' = '-splice',\n  '-spread' = '-spread',\n  '-statistic' = '-statistic',\n  '+stegano' = '+stegano',\n  '-stegano' = '-stegano',\n  '-stereo' = '-stereo',\n  '-stretch' = '-stretch',\n  '-strip' = '-strip',\n  '+stroke' = '+stroke',\n  '-stroke' = '-stroke',\n  '-strokewidth' = '-strokewidth',\n  '+strokewidth' = '+strokewidth',\n  '+style' = '+style',\n  '-style' = '-style',\n  '-subimage' = '-subimage',\n  '-subimage-search' = '-subimage-search',\n  '+subimage-search' = '+subimage-search',\n  '+swap' = '+swap',\n  '-swap' = '-swap',\n  '-swirl' = '-swirl',\n  '-synchronize' = '-synchronize',\n  '+synchronize' = '+synchronize',\n  '-taint' = '-taint',\n  '+taint' = '+taint',\n  '+text-font' = '+text-font',\n  '-text-font' = '-text-font',\n  '+texture' = '+texture',\n  '-texture' = '-texture',\n  '+threshold' = '+threshold',\n  '-threshold' = '-threshold',\n  '-thumbnail' = '-thumbnail',\n  '+tile' = '+tile',\n  '-tile' = '-tile',\n  '+tile-offset' = '+tile-offset',\n  '-tile-offset' = '-tile-offset',\n  '-tint' = '-tint',\n  '+tint' = '+tint',\n  '+title' = '+title',\n  '-title' = '-title',\n  '-transparent' = '-transparent',\n  '+transparent' = '+transparent',\n  '+transparent-color' = '+transparent-color',\n  '-transparent-color' = '-transparent-color',\n  '-transpose' = '-transpose',\n  '-transverse' = '-transverse',\n  '-treedepth' = '-treedepth',\n  '-trim' = '-trim',\n  '+type' = '+type',\n  '-type' = '-type',\n  '+undercolor' = '+undercolor',\n  '-undercolor' = '-undercolor',\n  '-unique' = '-unique',\n  '+unique' = '+unique',\n  '-unique-colors' = '-unique-colors',\n  '+units' = '+units',\n  '-units' = '-units',\n  '-unsharp' = '-unsharp',\n  '+update' = '+update',\n  '-update' = '-update',\n  '+use-pixmap' = '+use-pixmap',\n  '-use-pixmap' = '-use-pixmap',\n  '-verbose' = '-verbose',\n  '+verbose' = '+verbose',\n  '-version' = '-version',\n  '+view' = '+view',\n  '-view' = '-view',\n  '-vignette' = '-vignette',\n  '+visual' = '+visual',\n  '-visual' = '-visual',\n  '+watermark' = '+watermark',\n  '-watermark' = '-watermark',\n  '-wave' = '-wave',\n  '-wavelet-denoise' = '-wavelet-denoise',\n  '-weight' = '-weight',\n  '+white-point' = '+white-point',\n  '-white-point' = '-white-point',\n  '-white-threshold' = '-white-threshold',\n  '+window' = '+window',\n  '-window' = '-window',\n  '+window-group' = '+window-group',\n  '-window-group' = '-window-group',\n  '-write' = '-write',\n  '+write' = '+write',\n  '+write-mask' = '+write-mask',\n  '-write-mask' = '-write-mask',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMCompliance {\n  'CSS' = 'CSS',\n  'MVG' = 'MVG',\n  'No' = 'No',\n  'SVG' = 'SVG',\n  'X11' = 'X11',\n  'XPM' = 'XPM',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMComplex {\n  'Add' = 'Add',\n  'Conjugate' = 'Conjugate',\n  'Divide' = 'Divide',\n  'MagnitudePhase' = 'MagnitudePhase',\n  'Multiply' = 'Multiply',\n  'RealImaginary' = 'RealImaginary',\n  'Subtract' = 'Subtract',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMCompose {\n  'Atop' = 'Atop',\n  'Blend' = 'Blend',\n  'Blur' = 'Blur',\n  'Bumpmap' = 'Bumpmap',\n  'ChangeMask' = 'ChangeMask',\n  'Clear' = 'Clear',\n  'ColorBurn' = 'ColorBurn',\n  'ColorDodge' = 'ColorDodge',\n  'Colorize' = 'Colorize',\n  'CopyAlpha' = 'CopyAlpha',\n  'CopyBlack' = 'CopyBlack',\n  'CopyBlue' = 'CopyBlue',\n  'CopyCyan' = 'CopyCyan',\n  'CopyGreen' = 'CopyGreen',\n  'Copy' = 'Copy',\n  'CopyMagenta' = 'CopyMagenta',\n  'CopyRed' = 'CopyRed',\n  'CopyYellow' = 'CopyYellow',\n  'Darken' = 'Darken',\n  'DarkenIntensity' = 'DarkenIntensity',\n  'DivideDst' = 'DivideDst',\n  'DivideSrc' = 'DivideSrc',\n  'Dst' = 'Dst',\n  'Difference' = 'Difference',\n  'Displace' = 'Displace',\n  'Dissolve' = 'Dissolve',\n  'Distort' = 'Distort',\n  'DstAtop' = 'DstAtop',\n  'DstIn' = 'DstIn',\n  'DstOut' = 'DstOut',\n  'DstOver' = 'DstOver',\n  'Exclusion' = 'Exclusion',\n  'HardLight' = 'HardLight',\n  'HardMix' = 'HardMix',\n  'Hue' = 'Hue',\n  'In' = 'In',\n  'Intensity' = 'Intensity',\n  'Lighten' = 'Lighten',\n  'LightenIntensity' = 'LightenIntensity',\n  'LinearBurn' = 'LinearBurn',\n  'LinearDodge' = 'LinearDodge',\n  'LinearLight' = 'LinearLight',\n  'Luminize' = 'Luminize',\n  'Mathematics' = 'Mathematics',\n  'MinusDst' = 'MinusDst',\n  'MinusSrc' = 'MinusSrc',\n  'Modulate' = 'Modulate',\n  'ModulusAdd' = 'ModulusAdd',\n  'ModulusSubtract' = 'ModulusSubtract',\n  'Multiply' = 'Multiply',\n  'None' = 'None',\n  'Out' = 'Out',\n  'Overlay' = 'Overlay',\n  'Over' = 'Over',\n  'PegtopLight' = 'PegtopLight',\n  'PinLight' = 'PinLight',\n  'Plus' = 'Plus',\n  'Replace' = 'Replace',\n  'Saturate' = 'Saturate',\n  'Screen' = 'Screen',\n  'SoftLight' = 'SoftLight',\n  'Src' = 'Src',\n  'SrcAtop' = 'SrcAtop',\n  'SrcIn' = 'SrcIn',\n  'SrcOut' = 'SrcOut',\n  'SrcOver' = 'SrcOver',\n  'Stereo' = 'Stereo',\n  'VividLight' = 'VividLight',\n  'Xor' = 'Xor',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMCompress {\n  'B44A' = 'B44A',\n  'B44' = 'B44',\n  'BZip' = 'BZip',\n  'DXT1' = 'DXT1',\n  'DXT3' = 'DXT3',\n  'DXT5' = 'DXT5',\n  'Fax' = 'Fax',\n  'Group4' = 'Group4',\n  'JBIG1' = 'JBIG1',\n  'JBIG2' = 'JBIG2',\n  'JPEG2000' = 'JPEG2000',\n  'JPEG' = 'JPEG',\n  'LosslessJPEG' = 'LosslessJPEG',\n  'Lossless' = 'Lossless',\n  'LZMA' = 'LZMA',\n  'LZW' = 'LZW',\n  'None' = 'None',\n  'Piz' = 'Piz',\n  'Pxr24' = 'Pxr24',\n  'RLE' = 'RLE',\n  'RunlengthEncoded' = 'RunlengthEncoded',\n  'WebP' = 'WebP',\n  'ZipS' = 'ZipS',\n  'Zip' = 'Zip',\n  'Zstd' = 'Zstd',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMDataType {\n  'Byte' = 'Byte',\n  'Long' = 'Long',\n  'Short' = 'Short',\n  'String' = 'String',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMDebug {\n  'All' = 'All',\n  'Accelerate' = 'Accelerate',\n  'Annotate' = 'Annotate',\n  'Blob' = 'Blob',\n  'Cache' = 'Cache',\n  'Coder' = 'Coder',\n  'Command' = 'Command',\n  'Configure' = 'Configure',\n  'Deprecate' = 'Deprecate',\n  'Draw' = 'Draw',\n  'Exception' = 'Exception',\n  'Locale' = 'Locale',\n  'Module' = 'Module',\n  'None' = 'None',\n  'Pixel' = 'Pixel',\n  'Policy' = 'Policy',\n  'Resource' = 'Resource',\n  'Trace' = 'Trace',\n  'Transform' = 'Transform',\n  'User' = 'User',\n  'Wand' = 'Wand',\n  'X11' = 'X11',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMDecoration {\n  'LineThrough' = 'LineThrough',\n  'None' = 'None',\n  'Overline' = 'Overline',\n  'Underline' = 'Underline',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMDirection {\n  'right-to-left' = 'right-to-left',\n  'left-to-right' = 'left-to-right',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMDispose {\n  'Undefined' = 'Undefined',\n  'Background' = 'Background',\n  'None' = 'None',\n  'Previous' = 'Previous',\n  '0_' = '0',\n  '1_' = '1',\n  '2_' = '2',\n  '3_' = '3',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMDistort {\n  'Affine' = 'Affine',\n  'AffineProjection' = 'AffineProjection',\n  'ScaleRotateTranslate' = 'ScaleRotateTranslate',\n  'SRT' = 'SRT',\n  'Perspective' = 'Perspective',\n  'PerspectiveProjection' = 'PerspectiveProjection',\n  'BilinearForward' = 'BilinearForward',\n  'BilinearReverse' = 'BilinearReverse',\n  'Polynomial' = 'Polynomial',\n  'Arc' = 'Arc',\n  'Polar' = 'Polar',\n  'DePolar' = 'DePolar',\n  'Barrel' = 'Barrel',\n  'BarrelInverse' = 'BarrelInverse',\n  'Shepards' = 'Shepards',\n  'Resize' = 'Resize',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMDither {\n  'None' = 'None',\n  'FloydSteinberg' = 'FloydSteinberg',\n  'Riemersma' = 'Riemersma',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMEndian {\n  'LSB' = 'LSB',\n  'MSB' = 'MSB',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMEvaluate {\n  'Abs' = 'Abs',\n  'Add' = 'Add',\n  'AddModulus' = 'AddModulus',\n  'And' = 'And',\n  'Cos' = 'Cos',\n  'Cosine' = 'Cosine',\n  'Divide' = 'Divide',\n  'Exp' = 'Exp',\n  'Exponential' = 'Exponential',\n  'GaussianNoise' = 'GaussianNoise',\n  'ImpulseNoise' = 'ImpulseNoise',\n  'LaplacianNoise' = 'LaplacianNoise',\n  'LeftShift' = 'LeftShift',\n  'Log' = 'Log',\n  'Max' = 'Max',\n  'Mean' = 'Mean',\n  'Median' = 'Median',\n  'Min' = 'Min',\n  'MultiplicativeNoise' = 'MultiplicativeNoise',\n  'Multiply' = 'Multiply',\n  'Or' = 'Or',\n  'PoissonNoise' = 'PoissonNoise',\n  'Pow' = 'Pow',\n  'RightShift' = 'RightShift',\n  'RMS' = 'RMS',\n  'RootMeanSquare' = 'RootMeanSquare',\n  'Set' = 'Set',\n  'Sin' = 'Sin',\n  'Sine' = 'Sine',\n  'Subtract' = 'Subtract',\n  'Sum' = 'Sum',\n  'Threshold' = 'Threshold',\n  'ThresholdBlack' = 'ThresholdBlack',\n  'ThresholdWhite' = 'ThresholdWhite',\n  'UniformNoise' = 'UniformNoise',\n  'Xor' = 'Xor',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMFillRule {\n  'Evenodd' = 'Evenodd',\n  'NonZero' = 'NonZero',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMFilter {\n  'Bartlett' = 'Bartlett',\n  'Blackman' = 'Blackman',\n  'Bohman' = 'Bohman',\n  'Box' = 'Box',\n  'Catrom' = 'Catrom',\n  'Cosine' = 'Cosine',\n  'Cubic' = 'Cubic',\n  'Gaussian' = 'Gaussian',\n  'Hamming' = 'Hamming',\n  'Hann' = 'Hann',\n  'Hermite' = 'Hermite',\n  'Jinc' = 'Jinc',\n  'Kaiser' = 'Kaiser',\n  'Lagrange' = 'Lagrange',\n  'Lanczos' = 'Lanczos',\n  'Lanczos2' = 'Lanczos2',\n  'Lanczos2Sharp' = 'Lanczos2Sharp',\n  'LanczosRadius' = 'LanczosRadius',\n  'LanczosSharp' = 'LanczosSharp',\n  'Mitchell' = 'Mitchell',\n  'Parzen' = 'Parzen',\n  'Point' = 'Point',\n  'Quadratic' = 'Quadratic',\n  'Robidoux' = 'Robidoux',\n  'RobidouxSharp' = 'RobidouxSharp',\n  'Sinc' = 'Sinc',\n  'SincFast' = 'SincFast',\n  'Spline' = 'Spline',\n  'CubicSpline' = 'CubicSpline',\n  'Triangle' = 'Triangle',\n  'Welch' = 'Welch',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMFunction {\n  'Polynomial' = 'Polynomial',\n  'Sinusoid' = 'Sinusoid',\n  'ArcSin' = 'ArcSin',\n  'ArcTan' = 'ArcTan',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMGradient {\n  'Linear' = 'Linear',\n  'Radial' = 'Radial',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMGravity {\n  'None' = 'None',\n  'Center' = 'Center',\n  'East' = 'East',\n  'Forget' = 'Forget',\n  'NorthEast' = 'NorthEast',\n  'North' = 'North',\n  'NorthWest' = 'NorthWest',\n  'SouthEast' = 'SouthEast',\n  'South' = 'South',\n  'SouthWest' = 'SouthWest',\n  'West' = 'West',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMIntensity {\n  'Average' = 'Average',\n  'Brightness' = 'Brightness',\n  'Lightness' = 'Lightness',\n  'Mean' = 'Mean',\n  'MS' = 'MS',\n  'Rec601Luma' = 'Rec601Luma',\n  'Rec601Luminance' = 'Rec601Luminance',\n  'Rec709Luma' = 'Rec709Luma',\n  'Rec709Luminance' = 'Rec709Luminance',\n  'RMS' = 'RMS',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMIntent {\n  'Absolute' = 'Absolute',\n  'Perceptual' = 'Perceptual',\n  'Relative' = 'Relative',\n  'Saturation' = 'Saturation',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMInterlace {\n  'Line' = 'Line',\n  'None' = 'None',\n  'Plane' = 'Plane',\n  'Partition' = 'Partition',\n  'GIF' = 'GIF',\n  'JPEG' = 'JPEG',\n  'PNG' = 'PNG',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMInterpolate {\n  'Average' = 'Average',\n  'Average4' = 'Average4',\n  'Average9' = 'Average9',\n  'Average16' = 'Average16',\n  'Background' = 'Background',\n  'Bilinear' = 'Bilinear',\n  'Blend' = 'Blend',\n  'Catrom' = 'Catrom',\n  'Integer' = 'Integer',\n  'Mesh' = 'Mesh',\n  'Nearest' = 'Nearest',\n  'Spline' = 'Spline',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMKernel {\n  'Unity' = 'Unity',\n  'Gaussian' = 'Gaussian',\n  'DoG' = 'DoG',\n  'LoG' = 'LoG',\n  'Blur' = 'Blur',\n  'Comet' = 'Comet',\n  'Binomial' = 'Binomial',\n  'Laplacian' = 'Laplacian',\n  'Sobel' = 'Sobel',\n  'FreiChen' = 'FreiChen',\n  'Roberts' = 'Roberts',\n  'Prewitt' = 'Prewitt',\n  'Compass' = 'Compass',\n  'Kirsch' = 'Kirsch',\n  'Diamond' = 'Diamond',\n  'Square' = 'Square',\n  'Rectangle' = 'Rectangle',\n  'Disk' = 'Disk',\n  'Octagon' = 'Octagon',\n  'Plus' = 'Plus',\n  'Cross' = 'Cross',\n  'Ring' = 'Ring',\n  'Peaks' = 'Peaks',\n  'Edges' = 'Edges',\n  'Corners' = 'Corners',\n  'Diagonals' = 'Diagonals',\n  'LineEnds' = 'LineEnds',\n  'LineJunctions' = 'LineJunctions',\n  'Ridges' = 'Ridges',\n  'ConvexHull' = 'ConvexHull',\n  'ThinSe' = 'ThinSe',\n  'Skeleton' = 'Skeleton',\n  'Chebyshev' = 'Chebyshev',\n  'Manhattan' = 'Manhattan',\n  'Octagonal' = 'Octagonal',\n  'Euclidean' = 'Euclidean',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMLayers {\n  'Coalesce' = 'Coalesce',\n  'CompareAny' = 'CompareAny',\n  'CompareClear' = 'CompareClear',\n  'CompareOverlay' = 'CompareOverlay',\n  'Dispose' = 'Dispose',\n  'Optimize' = 'Optimize',\n  'OptimizeFrame' = 'OptimizeFrame',\n  'OptimizePlus' = 'OptimizePlus',\n  'OptimizeTransparency' = 'OptimizeTransparency',\n  'RemoveDups' = 'RemoveDups',\n  'RemoveZero' = 'RemoveZero',\n  'Composite' = 'Composite',\n  'Merge' = 'Merge',\n  'Flatten' = 'Flatten',\n  'Mosaic' = 'Mosaic',\n  'TrimBounds' = 'TrimBounds',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMLineCap {\n  'Butt' = 'Butt',\n  'Round' = 'Round',\n  'Square' = 'Square',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMLineJoin {\n  'Bevel' = 'Bevel',\n  'Miter' = 'Miter',\n  'Round' = 'Round',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMList {\n  'Align' = 'Align',\n  'Alpha' = 'Alpha',\n  'AutoThreshold' = 'AutoThreshold',\n  'Boolean' = 'Boolean',\n  'Cache' = 'Cache',\n  'Channel' = 'Channel',\n  'Class' = 'Class',\n  'CLI' = 'CLI',\n  'ClipPath' = 'ClipPath',\n  'Coder' = 'Coder',\n  'Color' = 'Color',\n  'Colorspace' = 'Colorspace',\n  'Command' = 'Command',\n  'Compliance' = 'Compliance',\n  'Complex' = 'Complex',\n  'Compose' = 'Compose',\n  'Compress' = 'Compress',\n  'Configure' = 'Configure',\n  'DataType' = 'DataType',\n  'Debug' = 'Debug',\n  'Decoration' = 'Decoration',\n  'Delegate' = 'Delegate',\n  'Direction' = 'Direction',\n  'Dispose' = 'Dispose',\n  'Distort' = 'Distort',\n  'Dither' = 'Dither',\n  'Endian' = 'Endian',\n  'Evaluate' = 'Evaluate',\n  'FillRule' = 'FillRule',\n  'Filter' = 'Filter',\n  'Font' = 'Font',\n  'Format' = 'Format',\n  'Function' = 'Function',\n  'Gradient' = 'Gradient',\n  'Gravity' = 'Gravity',\n  'Intensity' = 'Intensity',\n  'Intent' = 'Intent',\n  'Interlace' = 'Interlace',\n  'Interpolate' = 'Interpolate',\n  'Kernel' = 'Kernel',\n  'Layers' = 'Layers',\n  'LineCap' = 'LineCap',\n  'LineJoin' = 'LineJoin',\n  'List' = 'List',\n  'Locale' = 'Locale',\n  'LogEvent' = 'LogEvent',\n  'Log' = 'Log',\n  'Magic' = 'Magic',\n  'Method' = 'Method',\n  'Metric' = 'Metric',\n  'Mime' = 'Mime',\n  'Mode' = 'Mode',\n  'Morphology' = 'Morphology',\n  'Module' = 'Module',\n  'Noise' = 'Noise',\n  'Orientation' = 'Orientation',\n  'PixelChannel' = 'PixelChannel',\n  'PixelIntensity' = 'PixelIntensity',\n  'PixelMask' = 'PixelMask',\n  'PixelTrait' = 'PixelTrait',\n  'Policy' = 'Policy',\n  'PolicyDomain' = 'PolicyDomain',\n  'PolicyRights' = 'PolicyRights',\n  'Preview' = 'Preview',\n  'Primitive' = 'Primitive',\n  'QuantumFormat' = 'QuantumFormat',\n  'Resource' = 'Resource',\n  'SparseColor' = 'SparseColor',\n  'Statistic' = 'Statistic',\n  'Storage' = 'Storage',\n  'Stretch' = 'Stretch',\n  'Style' = 'Style',\n  'Threshold' = 'Threshold',\n  'Tool' = 'Tool',\n  'Type' = 'Type',\n  'Units' = 'Units',\n  'Validate' = 'Validate',\n  'VirtualPixel' = 'VirtualPixel',\n  'Weight' = 'Weight',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMLogEvent {\n  'All' = 'All',\n  'Accelerate' = 'Accelerate',\n  'Annotate' = 'Annotate',\n  'Blob' = 'Blob',\n  'Cache' = 'Cache',\n  'Coder' = 'Coder',\n  'Command' = 'Command',\n  'Configure' = 'Configure',\n  'Deprecate' = 'Deprecate',\n  'Draw' = 'Draw',\n  'Exception' = 'Exception',\n  'Locale' = 'Locale',\n  'Module' = 'Module',\n  'None' = 'None',\n  'Pixel' = 'Pixel',\n  'Policy' = 'Policy',\n  'Resource' = 'Resource',\n  'Trace' = 'Trace',\n  'Transform' = 'Transform',\n  'User' = 'User',\n  'Wand' = 'Wand',\n  'X11' = 'X11',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMLog {\n  'Path: /etc/ImageMagick-7/log.xml' = 'Path: /etc/ImageMagick-7/log.xml',\n  'Console        Generations     Limit  Format' = 'Console        Generations     Limit  Format',\n  '-------------------------------------------------------------------------------' = '-------------------------------------------------------------------------------',\n  'Magick-%g.log            3      2000   %t %r %u %v %d %c[%p]: %m/%f/%l/%d\\n  %e' = 'Magick-%g.log            3      2000   %t %r %u %v %d %c[%p]: %m/%f/%l/%d\\n  %e',\n  'Path: [built-in]' = 'Path: [built-in]',\n  'Magick-%g.log            0         0   %t %r %u %v %d %c[%p]: %m/%f/%l/%d\\n  %e' = 'Magick-%g.log            0         0   %t %r %u %v %d %c[%p]: %m/%f/%l/%d\\n  %e',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMMethod {\n  'FillToBorder' = 'FillToBorder',\n  'Floodfill' = 'Floodfill',\n  'Point' = 'Point',\n  'Replace' = 'Replace',\n  'Reset' = 'Reset',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMMetric {\n  'AE' = 'AE',\n  'DSSIM' = 'DSSIM',\n  'Fuzz' = 'Fuzz',\n  'MAE' = 'MAE',\n  'MEPP' = 'MEPP',\n  'MSE' = 'MSE',\n  'NCC' = 'NCC',\n  'PAE' = 'PAE',\n  'PHASH' = 'PHASH',\n  'PSNR' = 'PSNR',\n  'RMSE' = 'RMSE',\n  'SSIM' = 'SSIM',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMMode {\n  'Concatenate' = 'Concatenate',\n  'Frame' = 'Frame',\n  'Unframe' = 'Unframe',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMMorphology {\n  'Correlate' = 'Correlate',\n  'Convolve' = 'Convolve',\n  'Dilate' = 'Dilate',\n  'Erode' = 'Erode',\n  'Close' = 'Close',\n  'Open' = 'Open',\n  'DilateIntensity' = 'DilateIntensity',\n  'ErodeIntensity' = 'ErodeIntensity',\n  'CloseIntensity' = 'CloseIntensity',\n  'OpenIntensity' = 'OpenIntensity',\n  'DilateI' = 'DilateI',\n  'ErodeI' = 'ErodeI',\n  'CloseI' = 'CloseI',\n  'OpenI' = 'OpenI',\n  'Smooth' = 'Smooth',\n  'EdgeOut' = 'EdgeOut',\n  'EdgeIn' = 'EdgeIn',\n  'Edge' = 'Edge',\n  'TopHat' = 'TopHat',\n  'BottomHat' = 'BottomHat',\n  'Hmt' = 'Hmt',\n  'HitNMiss' = 'HitNMiss',\n  'HitAndMiss' = 'HitAndMiss',\n  'Thinning' = 'Thinning',\n  'Thicken' = 'Thicken',\n  'Distance' = 'Distance',\n  'IterativeDistance' = 'IterativeDistance',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMModule {\n  'Path: /usr/lib/ImageMagick-7.0.8/modules-Q16HDRI/coders' = 'Path: /usr/lib/ImageMagick-7.0.8/modules-Q16HDRI/coders',\n  'Image Coder' = 'Image Coder',\n  '-------------------------------------------------------------------------------' = '-------------------------------------------------------------------------------',\n  'aai' = 'aai',\n  'art' = 'art',\n  'avs' = 'avs',\n  'bgr' = 'bgr',\n  'bmp' = 'bmp',\n  'braille' = 'braille',\n  'cals' = 'cals',\n  'caption' = 'caption',\n  'cin' = 'cin',\n  'cip' = 'cip',\n  'clip' = 'clip',\n  'cmyk' = 'cmyk',\n  'cut' = 'cut',\n  'dcm' = 'dcm',\n  'dds' = 'dds',\n  'debug' = 'debug',\n  'dib' = 'dib',\n  'dng' = 'dng',\n  'dot' = 'dot',\n  'dpx' = 'dpx',\n  'ept' = 'ept',\n  'exr' = 'exr',\n  'fax' = 'fax',\n  'fits' = 'fits',\n  'gif' = 'gif',\n  'gradient' = 'gradient',\n  'gray' = 'gray',\n  'hald' = 'hald',\n  'hdr' = 'hdr',\n  'heic' = 'heic',\n  'histogram' = 'histogram',\n  'hrz' = 'hrz',\n  'html' = 'html',\n  'icon' = 'icon',\n  'info' = 'info',\n  'inline' = 'inline',\n  'ipl' = 'ipl',\n  'jbig' = 'jbig',\n  'jnx' = 'jnx',\n  'jp2' = 'jp2',\n  'jpeg' = 'jpeg',\n  'json' = 'json',\n  'label' = 'label',\n  'mac' = 'mac',\n  'magick' = 'magick',\n  'map' = 'map',\n  'mask' = 'mask',\n  'mat' = 'mat',\n  'matte' = 'matte',\n  'meta' = 'meta',\n  'miff' = 'miff',\n  'mono' = 'mono',\n  'mpc' = 'mpc',\n  'mpeg' = 'mpeg',\n  'mpr' = 'mpr',\n  'msl' = 'msl',\n  'mtv' = 'mtv',\n  'mvg' = 'mvg',\n  'null' = 'null',\n  'otb' = 'otb',\n  'palm' = 'palm',\n  'pango' = 'pango',\n  'pattern' = 'pattern',\n  'pcd' = 'pcd',\n  'pcl' = 'pcl',\n  'pcx' = 'pcx',\n  'pdb' = 'pdb',\n  'pdf' = 'pdf',\n  'pes' = 'pes',\n  'pgx' = 'pgx',\n  'pict' = 'pict',\n  'pix' = 'pix',\n  'plasma' = 'plasma',\n  'png' = 'png',\n  'pnm' = 'pnm',\n  'ps' = 'ps',\n  'ps2' = 'ps2',\n  'ps3' = 'ps3',\n  'psd' = 'psd',\n  'pwp' = 'pwp',\n  'raw' = 'raw',\n  'rgb' = 'rgb',\n  'rgf' = 'rgf',\n  'rla' = 'rla',\n  'rle' = 'rle',\n  'scr' = 'scr',\n  'sct' = 'sct',\n  'sfw' = 'sfw',\n  'sgi' = 'sgi',\n  'sixel' = 'sixel',\n  'stegano' = 'stegano',\n  'sun' = 'sun',\n  'svg' = 'svg',\n  'tga' = 'tga',\n  'thumbnail' = 'thumbnail',\n  'tiff' = 'tiff',\n  'tile' = 'tile',\n  'tim' = 'tim',\n  'ttf' = 'ttf',\n  'txt' = 'txt',\n  'uil' = 'uil',\n  'url' = 'url',\n  'uyvy' = 'uyvy',\n  'vicar' = 'vicar',\n  'vid' = 'vid',\n  'viff' = 'viff',\n  'vips' = 'vips',\n  'wbmp' = 'wbmp',\n  'webp' = 'webp',\n  'wmf' = 'wmf',\n  'wpg' = 'wpg',\n  'x' = 'x',\n  'xbm' = 'xbm',\n  'xc' = 'xc',\n  'xcf' = 'xcf',\n  'xpm' = 'xpm',\n  'xps' = 'xps',\n  'xtrn' = 'xtrn',\n  'xwd' = 'xwd',\n  'ycbcr' = 'ycbcr',\n  'yuv' = 'yuv',\n  'Path: /usr/lib/ImageMagick-7.0.8/modules-Q16HDRI/filters' = 'Path: /usr/lib/ImageMagick-7.0.8/modules-Q16HDRI/filters',\n  'Image Filter' = 'Image Filter',\n  'analyze' = 'analyze',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMNoise {\n  'Gaussian' = 'Gaussian',\n  'Impulse' = 'Impulse',\n  'Laplacian' = 'Laplacian',\n  'Multiplicative' = 'Multiplicative',\n  'Poisson' = 'Poisson',\n  'Random' = 'Random',\n  'Uniform' = 'Uniform',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMOrientation {\n  'TopLeft' = 'TopLeft',\n  'TopRight' = 'TopRight',\n  'BottomRight' = 'BottomRight',\n  'BottomLeft' = 'BottomLeft',\n  'LeftTop' = 'LeftTop',\n  'RightTop' = 'RightTop',\n  'RightBottom' = 'RightBottom',\n  'LeftBottom' = 'LeftBottom',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMPixelChannel {\n  'Undefined' = 'Undefined',\n  'A' = 'A',\n  'Alpha' = 'Alpha',\n  'B' = 'B',\n  'Bk' = 'Bk',\n  'Black' = 'Black',\n  'Blue' = 'Blue',\n  'Cb' = 'Cb',\n  'Composite' = 'Composite',\n  'CompositeMask' = 'CompositeMask',\n  'C' = 'C',\n  'Cr' = 'Cr',\n  'Cyan' = 'Cyan',\n  'Gray' = 'Gray',\n  'G' = 'G',\n  'Green' = 'Green',\n  'Index' = 'Index',\n  'Intensity' = 'Intensity',\n  'K' = 'K',\n  'M' = 'M',\n  'Magenta' = 'Magenta',\n  'Meta' = 'Meta',\n  'O' = 'O',\n  'R' = 'R',\n  'ReadMask' = 'ReadMask',\n  'Red' = 'Red',\n  'Sync' = 'Sync',\n  'WriteMask' = 'WriteMask',\n  'Y' = 'Y',\n  'Yellow' = 'Yellow',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMPixelIntensity {\n  'Average' = 'Average',\n  'Brightness' = 'Brightness',\n  'Lightness' = 'Lightness',\n  'Mean' = 'Mean',\n  'MS' = 'MS',\n  'Rec601Luma' = 'Rec601Luma',\n  'Rec601Luminance' = 'Rec601Luminance',\n  'Rec709Luma' = 'Rec709Luma',\n  'Rec709Luminance' = 'Rec709Luminance',\n  'RMS' = 'RMS',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMPixelMask {\n  'R' = 'R',\n  'Read' = 'Read',\n  'W' = 'W',\n  'Write' = 'Write',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMPixelTrait {\n  'Blend' = 'Blend',\n  'Copy' = 'Copy',\n  'Update' = 'Update',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMPolicyDomain {\n  'Cache' = 'Cache',\n  'Coder' = 'Coder',\n  'Delegate' = 'Delegate',\n  'Filter' = 'Filter',\n  'Module' = 'Module',\n  'Path' = 'Path',\n  'Resource' = 'Resource',\n  'System' = 'System',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMPolicyRights {\n  'All' = 'All',\n  'Execute' = 'Execute',\n  'None' = 'None',\n  'Read' = 'Read',\n  'Write' = 'Write',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMPreview {\n  'AddNoise' = 'AddNoise',\n  'Blur' = 'Blur',\n  'Brightness' = 'Brightness',\n  'Charcoal' = 'Charcoal',\n  'Despeckle' = 'Despeckle',\n  'Dull' = 'Dull',\n  'EdgeDetect' = 'EdgeDetect',\n  'Gamma' = 'Gamma',\n  'Grayscale' = 'Grayscale',\n  'Hue' = 'Hue',\n  'Implode' = 'Implode',\n  'JPEG' = 'JPEG',\n  'OilPaint' = 'OilPaint',\n  'Quantize' = 'Quantize',\n  'Raise' = 'Raise',\n  'ReduceNoise' = 'ReduceNoise',\n  'Roll' = 'Roll',\n  'Rotate' = 'Rotate',\n  'Saturation' = 'Saturation',\n  'Segment' = 'Segment',\n  'Shade' = 'Shade',\n  'Sharpen' = 'Sharpen',\n  'Shear' = 'Shear',\n  'Solarize' = 'Solarize',\n  'Spiff' = 'Spiff',\n  'Spread' = 'Spread',\n  'Swirl' = 'Swirl',\n  'Threshold' = 'Threshold',\n  'Wave' = 'Wave',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMPrimitive {\n  'Alpha' = 'Alpha',\n  'Arc' = 'Arc',\n  'Bezier' = 'Bezier',\n  'Circle' = 'Circle',\n  'Color' = 'Color',\n  'Ellipse' = 'Ellipse',\n  'Image' = 'Image',\n  'Line' = 'Line',\n  'Matte' = 'Matte',\n  'Path' = 'Path',\n  'Point' = 'Point',\n  'Polygon' = 'Polygon',\n  'Polyline' = 'Polyline',\n  'Rectangle' = 'Rectangle',\n  'RoundRectangle' = 'RoundRectangle',\n  'Text' = 'Text',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMQuantumFormat {\n  'FloatingPoint' = 'FloatingPoint',\n  'Signed' = 'Signed',\n  'Unsigned' = 'Unsigned',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMSparseColor {\n  'Barycentric' = 'Barycentric',\n  'Bilinear' = 'Bilinear',\n  'Inverse' = 'Inverse',\n  'Shepards' = 'Shepards',\n  'Voronoi' = 'Voronoi',\n  'Manhattan' = 'Manhattan',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMStatistic {\n  'Gradient' = 'Gradient',\n  'Maximum' = 'Maximum',\n  'Mean' = 'Mean',\n  'Median' = 'Median',\n  'Minimum' = 'Minimum',\n  'Mode' = 'Mode',\n  'NonPeak' = 'NonPeak',\n  'RootMeanSquare' = 'RootMeanSquare',\n  'RMS' = 'RMS',\n  'StandardDeviation' = 'StandardDeviation',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMStorage {\n  'Char' = 'Char',\n  'Double' = 'Double',\n  'Float' = 'Float',\n  'Long' = 'Long',\n  'LongLong' = 'LongLong',\n  'Quantum' = 'Quantum',\n  'Short' = 'Short',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMStretch {\n  'Any' = 'Any',\n  'Condensed' = 'Condensed',\n  'Expanded' = 'Expanded',\n  'ExtraCondensed' = 'ExtraCondensed',\n  'ExtraExpanded' = 'ExtraExpanded',\n  'Normal' = 'Normal',\n  'SemiCondensed' = 'SemiCondensed',\n  'SemiExpanded' = 'SemiExpanded',\n  'UltraCondensed' = 'UltraCondensed',\n  'UltraExpanded' = 'UltraExpanded',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMStyle {\n  'Any' = 'Any',\n  'Bold' = 'Bold',\n  'Italic' = 'Italic',\n  'Normal' = 'Normal',\n  'Oblique' = 'Oblique',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMTool {\n  'animate' = 'animate',\n  'compare' = 'compare',\n  'composite' = 'composite',\n  'conjure' = 'conjure',\n  'convert' = 'convert',\n  'display' = 'display',\n  'identify' = 'identify',\n  'import' = 'import',\n  'mogrify' = 'mogrify',\n  'montage' = 'montage',\n  'stream' = 'stream',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMType {\n  'Bilevel' = 'Bilevel',\n  'ColorSeparation' = 'ColorSeparation',\n  'ColorSeparationAlpha' = 'ColorSeparationAlpha',\n  'ColorSeparationMatte' = 'ColorSeparationMatte',\n  'Grayscale' = 'Grayscale',\n  'GrayscaleAlpha' = 'GrayscaleAlpha',\n  'GrayscaleMatte' = 'GrayscaleMatte',\n  'Optimize' = 'Optimize',\n  'Palette' = 'Palette',\n  'PaletteBilevelAlpha' = 'PaletteBilevelAlpha',\n  'PaletteBilevelMatte' = 'PaletteBilevelMatte',\n  'PaletteAlpha' = 'PaletteAlpha',\n  'PaletteMatte' = 'PaletteMatte',\n  'TrueColorAlpha' = 'TrueColorAlpha',\n  'TrueColorMatte' = 'TrueColorMatte',\n  'TrueColor' = 'TrueColor',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMUnits {\n  'PixelsPerInch' = 'PixelsPerInch',\n  'PixelsPerCentimeter' = 'PixelsPerCentimeter',\n  '1_' = '1',\n  '2_' = '2',\n  '3_' = '3',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMValidate {\n  'All' = 'All',\n  'Colorspace' = 'Colorspace',\n  'Compare' = 'Compare',\n  'Composite' = 'Composite',\n  'Convert' = 'Convert',\n  'FormatsDisk' = 'FormatsDisk',\n  'FormatsMap' = 'FormatsMap',\n  'FormatsMemory' = 'FormatsMemory',\n  'Identify' = 'Identify',\n  'ImportExport' = 'ImportExport',\n  'Montage' = 'Montage',\n  'Stream' = 'Stream',\n  'None' = 'None',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMVirtualPixel {\n  'Background' = 'Background',\n  'Black' = 'Black',\n  'CheckerTile' = 'CheckerTile',\n  'Dither' = 'Dither',\n  'Edge' = 'Edge',\n  'Gray' = 'Gray',\n  'HorizontalTile' = 'HorizontalTile',\n  'HorizontalTileEdge' = 'HorizontalTileEdge',\n  'Mirror' = 'Mirror',\n  'None' = 'None',\n  'Random' = 'Random',\n  'Tile' = 'Tile',\n  'Transparent' = 'Transparent',\n  'VerticalTile' = 'VerticalTile',\n  'VerticalTileEdge' = 'VerticalTileEdge',\n  'White' = 'White',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMWeight {\n  'Thin' = 'Thin',\n  'ExtraLight' = 'ExtraLight',\n  'UltraLight' = 'UltraLight',\n  'Normal' = 'Normal',\n  'Regular' = 'Regular',\n  'Medium' = 'Medium',\n  'DemiBold' = 'DemiBold',\n  'SemiBold' = 'SemiBold',\n  'Bold' = 'Bold',\n  'ExtraBold' = 'ExtraBold',\n  'UltraBold' = 'UltraBold',\n  'Heavy' = 'Heavy',\n  'Black' = 'Black',\n}\n"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","Symbol","iterator","v","op","TypeError","pop","push","pMap","iterable","mapper","options","concurrency","Infinity","ret","isRejected","isIterableDone","resolvingCount","currentIndex","nextItem","element","error","values","object","keys","map","name","flat","arr","reduce","a","b","concat","arrayToCliOne","command","c","trim","match","join","arrayToCli","cliToArrayOne","cliCommand","inString","spaceIndexes","index","spaceIndex","substring","filter","startsWith","endsWith","cliToArray","lines","split","currentCommand","line","slice","asCommand","subCommand","blobToUint8Array","blob","fileReader","FileReader","onload","event","target","Uint8Array","readAsArrayBuffer","blobToString","blb","reader","addEventListener","text","srcElement","readAsText","isInputFile","file","content","isOutputFile","uint8ArrayToString","charset","TextDecoder","decode","readFileAsText","_a","isImage","execute","asInputFile","_b","_c","buildInputFile","url","getFileName","fetch","arrayBuffer","uint8ArrayToBlob","Blob","outputFileToInputFile","inputFileToOutputFile","inputFile","asOutputFile","outputFile","decodeURIComponent","URL","pathname","getFileNameExtension","filePathOrUrl","lastIndexOf","loadImageElement","image","el","forceBrowserSupport","buildImageSrc","src","img","extension","browserSupportedImageExtensions","indexOf","outputFiles","createObjectURL","getInputFilesFromHtmlInputElement","inputFileToUint8Array","builtInImages","inputFileFiles","files","item","all","getPixelColor","x","executeAndReturnOutputFile","builtInImageNames","getBuiltInImages","extractInfo","info","commands","format","toLowerCase","getBuiltInImage","find","compare","img1","img2","fuzz","compareNumber","imgs","name1","name2","Call","parseFloat","processedFiles","JSON","parse","getConfigureFolders","contains","stderr","includes","replace","knownSupportedReadWriteImageFormats","executeOne","configOrCommand","config","asExecuteConfig","stdout","exitCode","inputFiles","command_1","t0_1","performance","now","executeListeners","forEach","listener","beforeExecute","took","id","afterExecute","errors","undefined","error_1","isExecuteCommand","arg","outputFileName","addExecuteListener","l","allInputFiles","results","allErrors","allStdout","allStderr","allOutputFiles","resultWithError","r","ImageHomeImpl","images","names","_this","promise","resolved","andReady","builtInImagesAdded","register","createImageHome","imageHome","ExecutionContextImpl","configOrCommands","getAll","get","addBuiltInImages","remove","inheritFrom","Error","newExecutionContext","create","request","args","requestNumber","magickWorkerPromisesKey","CreatePromiseEvent","magickWorkerPromises","magickWorker","postMessage","resolver","rejecter","emptyPromise","IMAlign","IMAlpha","IMAutoThreshold","IMBoolean","IMCache","IMChannel","IMClass","IMClipPath","IMColorspace","IMCommand","IMCompliance","IMComplex","IMCompose","IMCompress","IMDataType","IMDebug","IMDecoration","IMDirection","IMDispose","IMDistort","IMDither","IMEndian","IMEvaluate","IMFillRule","IMFilter","IMFunction","IMGradient","IMGravity","IMIntensity","IMIntent","IMInterlace","IMInterpolate","IMKernel","IMLayers","IMLineCap","IMLineJoin","IMList","IMLogEvent","IMLog","IMMethod","IMMetric","IMMode","IMMorphology","IMModule","IMNoise","IMOrientation","IMPixelChannel","IMPixelIntensity","IMPixelMask","IMPixelTrait","IMPolicyDomain","IMPolicyRights","IMPreview","IMPrimitive","IMQuantumFormat","IMSparseColor","IMStatistic","IMStorage","IMStretch","IMStyle","IMTool","IMType","IMUnits","IMValidate","IMVirtualPixel","IMWeight","Worker","onmessage","response","data"],"mappings":"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CAA,YACAA,UACAA,kBACAA,kBACAA,YACAA,gBACAA,4BAfF,CAAYA,UAAAA,aCAZ,SAAYC,GACVA,gBACAA,cACAA,sBAHF,CAAYA,kBAAAA,qBCAZ,SAAYC,GACVA,gBACAA,cACAA,YACAA,YAJF,CAAYA,YAAAA,eCAZ,SAAYC,GACVA,cACAA,4BACAA,YACAA,kBACAA,cALF,CAAYA,UAAAA,aCAZ,SAAYC,GACVA,YACAA,cACAA,oBACAA,QACAA,gBACAA,gBACAA,QACAA,cACAA,QACAA,kBACAA,cACAA,cACAA,QACAA,gBACAA,QACAA,YACAA,QACAA,QACAA,wBACAA,wBACAA,QACAA,oBACAA,cACAA,QACAA,YACAA,QACAA,0BACAA,QACAA,kBACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cA7DF,CAAYA,YAAAA,eCAZ,SAAYC,GACVA,4BACAA,4BAFF,CAAYA,UAAAA,aCAZ,SAAYC,GACVA,wCACAA,wBACAA,kCAHF,CAAYA,aAAAA,gBCAZ,SAAYC,GACVA,kBACAA,YACAA,cACAA,cACAA,YACAA,cACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,gBACAA,gBACAA,0BACAA,YACAA,YACAA,YACAA,cACAA,4BACAA,4BACAA,YACAA,gBACAA,cACAA,4BACAA,YACAA,YACAA,gBACAA,gBACAA,YACAA,YACAA,gBACAA,YAlCF,CAAYA,eAAAA,kBCAZ,SAAYC,GACVA,qBACAA,+BACAA,+BACAA,uBACAA,uBACAA,qBACAA,qBACAA,yCACAA,yCACAA,uBACAA,uBACAA,mBACAA,mBACAA,qCACAA,qCACAA,mBACAA,uBACAA,qCACAA,yCACAA,2CACAA,uBACAA,uBACAA,+BACAA,+BACAA,2BACAA,6BACAA,6BACAA,uBACAA,uBACAA,6BACAA,6BACAA,mCACAA,mCACAA,+BACAA,+BACAA,iCACAA,uCACAA,2BACAA,2BACAA,qBACAA,mBACAA,mBACAA,2DACAA,2DACAA,yCACAA,qBACAA,qBACAA,mCACAA,mCACAA,+BACAA,+BACAA,uBACAA,iCACAA,iCACAA,iCACAA,iCACAA,iDACAA,qBACAA,qBACAA,yBACAA,yBACAA,iBACAA,yBACAA,yBACAA,+BACAA,2BACAA,mBACAA,qBACAA,mBACAA,mBACAA,6BACAA,6BACAA,6BACAA,6BACAA,qBACAA,qBACAA,mBACAA,2BACAA,2BACAA,2BACAA,2BACAA,mCACAA,uBACAA,+BACAA,+BACAA,yBACAA,yBACAA,yBACAA,yBACAA,yBACAA,yBACAA,yBACAA,yBACAA,6BACAA,2BACAA,2BACAA,+BACAA,mDACAA,2CACAA,2BACAA,mBACAA,mBACAA,qBACAA,qBACAA,qBACAA,2BACAA,uBACAA,uBACAA,qBACAA,qBACAA,uBACAA,uBACAA,yBACAA,yBACAA,qBACAA,qBACAA,yBACAA,yBACAA,uBACAA,uBACAA,6BACAA,6BACAA,6BACAA,2BACAA,2BACAA,yBACAA,yBACAA,yBACAA,yBACAA,yDACAA,yDACAA,2BACAA,2BACAA,yBACAA,yBACAA,uBACAA,uBACAA,mBACAA,6BACAA,6BACAA,2BACAA,2BACAA,mBACAA,uBACAA,2BACAA,2BACAA,2BACAA,uBACAA,uBACAA,yBACAA,2BACAA,2BACAA,6CACAA,mBACAA,uBACAA,yBACAA,yBACAA,uBACAA,2BACAA,2BACAA,iBACAA,iBACAA,mBACAA,mBACAA,uBACAA,uBACAA,yBACAA,mBACAA,6BACAA,6BACAA,mBACAA,mBACAA,mBACAA,+BACAA,+BACAA,qBACAA,2BACAA,mBACAA,mBACAA,eACAA,qBACAA,qBACAA,qCACAA,2BACAA,2BACAA,yBACAA,yBACAA,6BACAA,qCACAA,qCACAA,6BACAA,yCACAA,yCACAA,mCACAA,mCACAA,uBACAA,uBACAA,2BACAA,iBACAA,iBACAA,6BACAA,6BACAA,yBACAA,uBACAA,uBACAA,6BACAA,6BACAA,uBACAA,uBACAA,6BACAA,6BACAA,6CACAA,6CACAA,iCACAA,iCACAA,mDACAA,6CACAA,6CACAA,yBACAA,yBACAA,2BACAA,qBACAA,qBACAA,iBACAA,uBACAA,qBACAA,qBACAA,mCACAA,mCACAA,qBACAA,uCACAA,uCACAA,mBACAA,uCACAA,iBACAA,iBACAA,mBACAA,mBACAA,uCACAA,uCACAA,yBACAA,mBACAA,mBACAA,uBACAA,uBACAA,mBACAA,2BACAA,yBACAA,yBACAA,yBACAA,yBACAA,+BACAA,+BACAA,qBACAA,+BACAA,uBACAA,iCACAA,mBACAA,mBACAA,uBACAA,uBACAA,qBACAA,qBACAA,mBACAA,6BACAA,uBACAA,uBACAA,uCACAA,uBACAA,uBACAA,mBACAA,mBACAA,qBACAA,mBACAA,mBACAA,qBACAA,qBACAA,mBACAA,mBACAA,6BACAA,6BACAA,2BACAA,2BACAA,mBACAA,6BACAA,6BACAA,6BACAA,yBACAA,qBACAA,yBACAA,yBACAA,yBACAA,yBACAA,yBACAA,2BACAA,2BACAA,qBACAA,qBACAA,2CACAA,yCACAA,mBACAA,6BACAA,6BACAA,iCACAA,iCACAA,uBACAA,uBACAA,qBACAA,qBACAA,uBACAA,uBACAA,uBACAA,uBACAA,2BACAA,iDACAA,iDACAA,yBACAA,mBACAA,uBACAA,yCACAA,uBACAA,yCACAA,yCACAA,qBACAA,qBACAA,qBACAA,uBACAA,uBACAA,uBACAA,uBACAA,uBACAA,mBACAA,mBACAA,yBACAA,uCACAA,2BACAA,+BACAA,iBACAA,iBACAA,qBACAA,uBACAA,qCACAA,qCACAA,yBACAA,qBACAA,qBACAA,+CACAA,+CACAA,uBACAA,uBACAA,mDACAA,mDACAA,uBACAA,qBACAA,qBACAA,qBACAA,qBACAA,2BACAA,mCACAA,uBACAA,uBACAA,6BACAA,yBACAA,yBACAA,uBACAA,yBACAA,qBACAA,uBACAA,uBACAA,iCACAA,iCACAA,qBACAA,qBACAA,2BACAA,yCACAA,yCACAA,mBACAA,mBACAA,qBACAA,iCACAA,iCACAA,qBACAA,qBACAA,6BACAA,6BACAA,yBACAA,yBACAA,6BACAA,6BACAA,6BACAA,mBACAA,mBACAA,iCACAA,iCACAA,mBACAA,mBACAA,qBACAA,qBACAA,iCACAA,iCACAA,6CACAA,6CACAA,6BACAA,+BACAA,6BACAA,mBACAA,mBACAA,mBACAA,+BACAA,+BACAA,uBACAA,uBACAA,qCACAA,qBACAA,qBACAA,yBACAA,uBACAA,uBACAA,+BACAA,+BACAA,yBACAA,yBACAA,yBACAA,mBACAA,mBACAA,2BACAA,uBACAA,uBACAA,6BACAA,6BACAA,mBACAA,yCACAA,uBACAA,iCACAA,iCACAA,v9/DACAA,uBACAA,uBACAA,mCACAA,mCACAA,qBACAA,qBACAA,+BACAA,+BA5bF,CAAYA,YAAAA,eCAZ,SAAYC,GACVA,YACAA,YACAA,UACAA,YACAA,YACAA,YANF,CAAYA,eAAAA,kBCAZ,SAAYC,GACVA,YACAA,wBACAA,kBACAA,kCACAA,sBACAA,gCACAA,sBAPF,CAAYA,YAAAA,eCAZ,SAAYC,GACVA,cACAA,gBACAA,cACAA,oBACAA,0BACAA,gBACAA,wBACAA,0BACAA,sBACAA,wBACAA,wBACAA,sBACAA,sBACAA,wBACAA,cACAA,4BACAA,oBACAA,0BACAA,kBACAA,oCACAA,wBACAA,wBACAA,YACAA,0BACAA,sBACAA,sBACAA,oBACAA,oBACAA,gBACAA,kBACAA,oBACAA,wBACAA,wBACAA,oBACAA,YACAA,UACAA,wBACAA,oBACAA,sCACAA,0BACAA,4BACAA,4BACAA,sBACAA,4BACAA,sBACAA,sBACAA,sBACAA,0BACAA,oCACAA,sBACAA,cACAA,YACAA,oBACAA,cACAA,4BACAA,sBACAA,cACAA,oBACAA,sBACAA,kBACAA,wBACAA,YACAA,oBACAA,gBACAA,kBACAA,oBACAA,kBACAA,0BACAA,YArEF,CAAYA,YAAAA,eCAZ,SAAYC,GACVA,cACAA,YACAA,cACAA,cACAA,cACAA,cACAA,YACAA,kBACAA,gBACAA,gBACAA,sBACAA,cACAA,8BACAA,sBACAA,cACAA,YACAA,cACAA,YACAA,gBACAA,YACAA,sCACAA,cACAA,cACAA,YACAA,cAzBF,CAAYA,aAAAA,gBCAZ,SAAYC,GACVA,cACAA,cACAA,gBACAA,kBAJF,CAAYA,aAAAA,gBCAZ,SAAYC,GACVA,YACAA,0BACAA,sBACAA,cACAA,gBACAA,gBACAA,oBACAA,wBACAA,wBACAA,cACAA,wBACAA,kBACAA,kBACAA,cACAA,gBACAA,kBACAA,sBACAA,gBACAA,wBACAA,cACAA,cACAA,YAtBF,CAAYA,UAAAA,aCAZ,SAAYC,GACVA,4BACAA,cACAA,sBACAA,wBAJF,CAAYA,eAAAA,kBCAZ,SAAYC,GACVA,mCACAA,mCAFF,CAAYA,cAAAA,iBCAZ,SAAYC,GACVA,wBACAA,0BACAA,cACAA,sBACAA,YACAA,YACAA,YACAA,YARF,CAAYA,YAAAA,eCAZ,SAAYC,GACVA,kBACAA,sCACAA,8CACAA,YACAA,4BACAA,gDACAA,oCACAA,oCACAA,0BACAA,YACAA,gBACAA,oBACAA,kBACAA,gCACAA,sBACAA,kBAhBF,CAAYA,YAAAA,eCAZ,SAAYC,GACVA,cACAA,kCACAA,wBAHF,CAAYA,WAAAA,cCAZ,SAAYC,GACVA,YACAA,YAFF,CAAYA,WAAAA,cCAZ,SAAYC,GACVA,YACAA,YACAA,0BACAA,YACAA,YACAA,kBACAA,kBACAA,YACAA,4BACAA,gCACAA,8BACAA,kCACAA,wBACAA,YACAA,YACAA,cACAA,kBACAA,YACAA,4CACAA,sBACAA,UACAA,8BACAA,YACAA,0BACAA,YACAA,kCACAA,YACAA,YACAA,cACAA,sBACAA,YACAA,wBACAA,kCACAA,kCACAA,8BACAA,YApCF,CAAYA,aAAAA,gBCAZ,SAAYC,GACVA,oBACAA,oBAFF,CAAYA,aAAAA,gBCAZ,SAAYC,GACVA,sBACAA,sBACAA,kBACAA,YACAA,kBACAA,kBACAA,gBACAA,sBACAA,oBACAA,cACAA,oBACAA,cACAA,kBACAA,sBACAA,oBACAA,sBACAA,gCACAA,gCACAA,8BACAA,sBACAA,kBACAA,gBACAA,wBACAA,sBACAA,gCACAA,cACAA,sBACAA,kBACAA,4BACAA,sBACAA,gBA/BF,CAAYA,WAAAA,cCAZ,SAAYC,GACVA,0BACAA,sBACAA,kBACAA,kBAJF,CAAYA,aAAAA,gBCAZ,SAAYC,GACVA,kBACAA,kBAFF,CAAYA,aAAAA,gBCAZ,SAAYC,GACVA,cACAA,kBACAA,cACAA,kBACAA,wBACAA,gBACAA,wBACAA,wBACAA,gBACAA,wBACAA,cAXF,CAAYA,YAAAA,eCAZ,SAAYC,GACVA,oBACAA,0BACAA,wBACAA,cACAA,UACAA,0BACAA,oCACAA,0BACAA,oCACAA,YAVF,CAAYA,cAAAA,iBCAZ,SAAYC,GACVA,sBACAA,0BACAA,sBACAA,0BAJF,CAAYA,WAAAA,cCAZ,SAAYC,GACVA,cACAA,cACAA,gBACAA,wBACAA,YACAA,cACAA,YAPF,CAAYA,cAAAA,iBCAZ,SAAYC,GACVA,oBACAA,sBACAA,sBACAA,wBACAA,0BACAA,sBACAA,gBACAA,kBACAA,oBACAA,cACAA,oBACAA,kBAZF,CAAYA,gBAAAA,mBCAZ,SAAYC,GACVA,gBACAA,sBACAA,YACAA,YACAA,cACAA,gBACAA,sBACAA,wBACAA,gBACAA,sBACAA,oBACAA,oBACAA,oBACAA,kBACAA,oBACAA,kBACAA,wBACAA,cACAA,oBACAA,cACAA,gBACAA,cACAA,gBACAA,gBACAA,oBACAA,wBACAA,sBACAA,gCACAA,kBACAA,0BACAA,kBACAA,sBACAA,wBACAA,wBACAA,wBACAA,wBApCF,CAAYA,WAAAA,cCAZ,SAAYC,GACVA,sBACAA,0BACAA,8BACAA,kCACAA,oBACAA,sBACAA,gCACAA,8BACAA,8CACAA,0BACAA,0BACAA,wBACAA,gBACAA,oBACAA,kBACAA,0BAhBF,CAAYA,WAAAA,cCAZ,SAAYC,GACVA,cACAA,gBACAA,kBAHF,CAAYA,YAAAA,eCAZ,SAAYC,GACVA,gBACAA,gBACAA,gBAHF,CAAYA,aAAAA,gBCAZ,SAAYC,GACVA,gBACAA,gBACAA,gCACAA,oBACAA,gBACAA,oBACAA,gBACAA,YACAA,sBACAA,gBACAA,gBACAA,0BACAA,oBACAA,0BACAA,oBACAA,oBACAA,sBACAA,wBACAA,sBACAA,gBACAA,0BACAA,sBACAA,wBACAA,oBACAA,oBACAA,kBACAA,kBACAA,sBACAA,sBACAA,kBACAA,cACAA,kBACAA,sBACAA,sBACAA,oBACAA,wBACAA,kBACAA,wBACAA,4BACAA,kBACAA,kBACAA,oBACAA,sBACAA,cACAA,kBACAA,sBACAA,YACAA,gBACAA,kBACAA,kBACAA,cACAA,cACAA,0BACAA,kBACAA,gBACAA,4BACAA,8BACAA,kCACAA,wBACAA,0BACAA,kBACAA,8BACAA,8BACAA,oBACAA,wBACAA,gCACAA,sBACAA,4BACAA,wBACAA,oBACAA,oBACAA,gBACAA,wBACAA,cACAA,cACAA,gBACAA,sBACAA,8BACAA,kBA/EF,CAAYA,SAAAA,YCAZ,SAAYC,GACVA,YACAA,0BACAA,sBACAA,cACAA,gBACAA,gBACAA,oBACAA,wBACAA,wBACAA,cACAA,wBACAA,kBACAA,kBACAA,cACAA,gBACAA,kBACAA,sBACAA,gBACAA,wBACAA,cACAA,cACAA,YAtBF,CAAYA,aAAAA,gBCAZ,SAAYC,GACVA,yEACAA,iGACAA,uKACAA,uKACAA,yCACAA,uKANF,CAAYA,QAAAA,WCAZ,SAAYC,GACVA,8BACAA,wBACAA,gBACAA,oBACAA,gBALF,CAAYA,WAAAA,cCAZ,SAAYC,GACVA,UACAA,gBACAA,cACAA,YACAA,cACAA,YACAA,YACAA,YACAA,gBACAA,cACAA,cACAA,cAZF,CAAYA,WAAAA,cCAZ,SAAYC,GACVA,4BACAA,gBACAA,oBAHF,CAAYA,SAAAA,YCAZ,SAAYC,GACVA,wBACAA,sBACAA,kBACAA,gBACAA,gBACAA,cACAA,oCACAA,kCACAA,kCACAA,gCACAA,oBACAA,kBACAA,kBACAA,gBACAA,kBACAA,oBACAA,kBACAA,cACAA,kBACAA,wBACAA,YACAA,sBACAA,0BACAA,sBACAA,oBACAA,sBACAA,wCA3BF,CAAYA,eAAAA,kBCAZ,SAAYC,GACVA,uHACAA,+BACAA,uKACAA,YACAA,YACAA,YACAA,YACAA,YACAA,oBACAA,cACAA,oBACAA,YACAA,YACAA,cACAA,cACAA,YACAA,YACAA,YACAA,gBACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,cACAA,YACAA,sBACAA,cACAA,cACAA,YACAA,cACAA,wBACAA,YACAA,cACAA,cACAA,cACAA,kBACAA,YACAA,cACAA,YACAA,YACAA,cACAA,cACAA,gBACAA,YACAA,kBACAA,YACAA,cACAA,YACAA,gBACAA,cACAA,cACAA,cACAA,YACAA,cACAA,YACAA,YACAA,YACAA,YACAA,cACAA,YACAA,cACAA,gBACAA,oBACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,cACAA,YACAA,kBACAA,YACAA,YACAA,UACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,YACAA,gBACAA,oBACAA,YACAA,YACAA,YACAA,wBACAA,cACAA,cACAA,YACAA,YACAA,YACAA,YACAA,YACAA,cACAA,gBACAA,YACAA,cACAA,cACAA,cACAA,cACAA,YACAA,YACAA,QACAA,YACAA,UACAA,YACAA,YACAA,YACAA,cACAA,YACAA,gBACAA,YACAA,yHACAA,iCACAA,oBA/HF,CAAYA,WAAAA,cCAZ,SAAYC,GACVA,sBACAA,oBACAA,wBACAA,kCACAA,oBACAA,kBACAA,oBAPF,CAAYA,UAAAA,aCAZ,SAAYC,GACVA,oBACAA,sBACAA,4BACAA,0BACAA,oBACAA,sBACAA,4BACAA,0BARF,CAAYA,gBAAAA,mBCAZ,SAAYC,GACVA,wBACAA,QACAA,gBACAA,QACAA,UACAA,gBACAA,cACAA,UACAA,wBACAA,gCACAA,QACAA,UACAA,cACAA,cACAA,QACAA,gBACAA,gBACAA,wBACAA,QACAA,QACAA,oBACAA,cACAA,QACAA,QACAA,sBACAA,YACAA,cACAA,wBACAA,QACAA,kBA9BF,CAAYA,iBAAAA,oBCAZ,SAAYC,GACVA,oBACAA,0BACAA,wBACAA,cACAA,UACAA,0BACAA,oCACAA,0BACAA,oCACAA,YAVF,CAAYA,mBAAAA,sBCAZ,SAAYC,GACVA,QACAA,cACAA,QACAA,gBAJF,CAAYA,cAAAA,iBCAZ,SAAYC,GACVA,gBACAA,cACAA,kBAHF,CAAYA,eAAAA,kBCAZ,SAAYC,GACVA,gBACAA,gBACAA,sBACAA,kBACAA,kBACAA,cACAA,sBACAA,kBARF,CAAYA,iBAAAA,oBCAZ,SAAYC,GACVA,YACAA,oBACAA,cACAA,cACAA,gBALF,CAAYA,iBAAAA,oBCAZ,SAAYC,GACVA,sBACAA,cACAA,0BACAA,sBACAA,wBACAA,cACAA,0BACAA,gBACAA,wBACAA,YACAA,oBACAA,cACAA,sBACAA,sBACAA,gBACAA,4BACAA,cACAA,kBACAA,0BACAA,oBACAA,gBACAA,oBACAA,gBACAA,sBACAA,gBACAA,kBACAA,gBACAA,wBACAA,cA7BF,CAAYA,YAAAA,eCAZ,SAAYC,GACVA,gBACAA,YACAA,kBACAA,kBACAA,gBACAA,oBACAA,gBACAA,cACAA,gBACAA,cACAA,gBACAA,oBACAA,sBACAA,wBACAA,kCACAA,cAhBF,CAAYA,cAAAA,iBCAZ,SAAYC,GACVA,gCACAA,kBACAA,sBAHF,CAAYA,kBAAAA,qBCAZ,SAAYC,GACVA,4BACAA,sBACAA,oBACAA,sBACAA,oBACAA,wBANF,CAAYA,gBAAAA,mBCAZ,SAAYC,GACVA,sBACAA,oBACAA,cACAA,kBACAA,oBACAA,cACAA,oBACAA,kCACAA,YACAA,wCAVF,CAAYA,cAAAA,iBCAZ,SAAYC,GACVA,cACAA,kBACAA,gBACAA,cACAA,sBACAA,oBACAA,gBAPF,CAAYA,YAAAA,eCAZ,SAAYC,GACVA,YACAA,wBACAA,sBACAA,kCACAA,gCACAA,kBACAA,gCACAA,8BACAA,kCACAA,gCAVF,CAAYA,YAAAA,eCAZ,SAAYC,GACVA,YACAA,cACAA,kBACAA,kBACAA,oBALF,CAAYA,UAAAA,aCAZ,SAAYC,GACVA,oBACAA,oBACAA,wBACAA,oBACAA,oBACAA,oBACAA,sBACAA,kBACAA,oBACAA,oBACAA,kBAXF,CAAYA,SAAAA,YCAZ,SAAYC,GACVA,oBACAA,oCACAA,8CACAA,8CACAA,wBACAA,kCACAA,kCACAA,sBACAA,oBACAA,4CACAA,4CACAA,8BACAA,8BACAA,kCACAA,kCACAA,wBAhBF,CAAYA,SAAAA,YCAZ,SAAYC,GACVA,gCACAA,4CACAA,YACAA,YACAA,YALF,CAAYA,UAAAA,aCAZ,SAAYC,GACVA,YACAA,0BACAA,oBACAA,wBACAA,oBACAA,4BACAA,0BACAA,gCACAA,sBACAA,8BACAA,oBACAA,kBACAA,cAbF,CAAYA,aAAAA,gBCAZ,SAAYC,GACVA,0BACAA,gBACAA,4BACAA,kBACAA,cACAA,cACAA,kCACAA,0CACAA,kBACAA,cACAA,kBACAA,cACAA,4BACAA,8BACAA,sCACAA,gBAhBF,CAAYA,iBAAAA,oBCAZ,SAAYC,GACVA,cACAA,0BACAA,0BACAA,kBACAA,oBACAA,kBACAA,sBACAA,sBACAA,cACAA,wBACAA,wBACAA,gBACAA,gBAbF,CAAYA,WAAAA"}