{"version":3,"file":"wasm-imagemagick.umd-es5.js","sources":["../../node_modules/tslib/tslib.es6.js","../../node_modules/p-map/index.js","../../src/util/misc.ts","../../src/util/cli.ts","../../src/util/file.ts","../../src/util/html.ts","../../src/util/image.ts","../../src/util/imageBuiltIn.ts","../../src/util/imageCompare.ts","../../src/util/imageExtractInfo.ts","../../src/util/support.ts","../../src/execute.ts","../../src/imageHome.ts","../../src/executionContext.ts","../../src/magickApi.ts","../../src/list/IMAlign.ts","../../src/list/IMAlpha.ts","../../src/list/IMAutoThreshold.ts","../../src/list/IMBoolean.ts","../../src/list/IMCache.ts","../../src/list/IMChannel.ts","../../src/list/IMClass.ts","../../src/list/IMClipPath.ts","../../src/list/IMColorspace.ts","../../src/list/IMCommand.ts","../../src/list/IMCompliance.ts","../../src/list/IMComplex.ts","../../src/list/IMCompose.ts","../../src/list/IMCompress.ts","../../src/list/IMDataType.ts","../../src/list/IMDebug.ts","../../src/list/IMDecoration.ts","../../src/list/IMDirection.ts","../../src/list/IMDispose.ts","../../src/list/IMDistort.ts","../../src/list/IMDither.ts","../../src/list/IMEndian.ts","../../src/list/IMEvaluate.ts","../../src/list/IMFillRule.ts","../../src/list/IMFilter.ts","../../src/list/IMFunction.ts","../../src/list/IMGradient.ts","../../src/list/IMGravity.ts","../../src/list/IMIntensity.ts","../../src/list/IMIntent.ts","../../src/list/IMInterlace.ts","../../src/list/IMInterpolate.ts","../../src/list/IMKernel.ts","../../src/list/IMLayers.ts","../../src/list/IMLineCap.ts","../../src/list/IMLineJoin.ts","../../src/list/IMList.ts","../../src/list/IMLogEvent.ts","../../src/list/IMLog.ts","../../src/list/IMMethod.ts","../../src/list/IMMetric.ts","../../src/list/IMMode.ts","../../src/list/IMMorphology.ts","../../src/list/IMModule.ts","../../src/list/IMNoise.ts","../../src/list/IMOrientation.ts","../../src/list/IMPixelChannel.ts","../../src/list/IMPixelIntensity.ts","../../src/list/IMPixelMask.ts","../../src/list/IMPixelTrait.ts","../../src/list/IMPolicyDomain.ts","../../src/list/IMPolicyRights.ts","../../src/list/IMPreview.ts","../../src/list/IMPrimitive.ts","../../src/list/IMQuantumFormat.ts","../../src/list/IMSparseColor.ts","../../src/list/IMStatistic.ts","../../src/list/IMStorage.ts","../../src/list/IMStretch.ts","../../src/list/IMStyle.ts","../../src/list/IMTool.ts","../../src/list/IMType.ts","../../src/list/IMUnits.ts","../../src/list/IMValidate.ts","../../src/list/IMVirtualPixel.ts","../../src/list/IMWeight.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","'use strict';\n\nconst pMap = (iterable, mapper, options) => new Promise((resolve, reject) => {\n\toptions = Object.assign({\n\t\tconcurrency: Infinity\n\t}, options);\n\n\tif (typeof mapper !== 'function') {\n\t\tthrow new TypeError('Mapper function is required');\n\t}\n\n\tconst {concurrency} = options;\n\n\tif (!(typeof concurrency === 'number' && concurrency >= 1)) {\n\t\tthrow new TypeError(`Expected \\`concurrency\\` to be a number from 1 and up, got \\`${concurrency}\\` (${typeof concurrency})`);\n\t}\n\n\tconst ret = [];\n\tconst iterator = iterable[Symbol.iterator]();\n\tlet isRejected = false;\n\tlet isIterableDone = false;\n\tlet resolvingCount = 0;\n\tlet currentIndex = 0;\n\n\tconst next = () => {\n\t\tif (isRejected) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextItem = iterator.next();\n\t\tconst i = currentIndex;\n\t\tcurrentIndex++;\n\n\t\tif (nextItem.done) {\n\t\t\tisIterableDone = true;\n\n\t\t\tif (resolvingCount === 0) {\n\t\t\t\tresolve(ret);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tresolvingCount++;\n\n\t\tPromise.resolve(nextItem.value)\n\t\t\t.then(element => mapper(element, i))\n\t\t\t.then(\n\t\t\t\tvalue => {\n\t\t\t\t\tret[i] = value;\n\t\t\t\t\tresolvingCount--;\n\t\t\t\t\tnext();\n\t\t\t\t},\n\t\t\t\terror => {\n\t\t\t\t\tisRejected = true;\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t);\n\t};\n\n\tfor (let i = 0; i < concurrency; i++) {\n\t\tnext();\n\n\t\tif (isIterableDone) {\n\t\t\tbreak;\n\t\t}\n\t}\n});\n\nmodule.exports = pMap;\nmodule.exports.default = pMap;\n","// internal misc utilities\n\nexport function values<T>(object: { [k: string]: T }): T[] {\n  return Object.keys(object).map(name => object[name])\n}\n\nexport function flat<T>(arr: T[][]): T[] {\n  return arr.reduce((a, b) => a.concat(b))\n}\n\n// export function trimNoNewLines(s: string): string {\n//   return s.replace(/^ +/, '').replace(/ +$/, '')\n// }\n","import { Command } from '..'\nimport { ExecuteCommand } from '../execute'\nimport { flat } from './misc'\n\n// TODO: store variables from text file output and reuse them. example:\n// `\n// color=$(convert filename.png -format \"%[pixel:p{0,0}]\" info:foo.txt)\n// convert filename.png -alpha off -bordercolor $color -border 1 \\\n//     \\( +clone -fuzz 30% -fill none -floodfill +0+0 $color \\\n//        -alpha extract -geometry 200% -blur 0x0.5 \\\n//        -morphology erode square:1 -geometry 50% \\) \\\n//     -compose CopyOpacity -composite -shave 1 outputfilename.png\n// `\n\n/**\n * Generates a valid command line command from given `string[]` command. Works with a single command.\n */\nfunction arrayToCliOne(command: Command): string {\n  return command\n    .map(c => c + '')\n\n    // if it contain spaces\n    .map(c => (c.trim().match(/\\s/)) ? `'${c}'` : c)\n\n    // escape parenthesis\n    .map(c => c.trim() === '(' ? '\\\\(' : c.trim() === ')' ? '\\\\)' : c)\n\n    .join(' ')\n}\n\n/**\n * Generates a valid command line string from given `string[]` that is compatible with  {@link call}. Works with multiple\n * commands by separating  them with new lines and support comand splitting in new lines using `\\`.\n * See {@link ExecuteCommand} for more information.\n */\nexport function arrayToCli(command: Command | Command[]): string {\n  const cmd = typeof command[0] === 'string' ? [command as Command] : command as Command[]\n  return cmd.map(arrayToCliOne).join('\\n')\n}\n\n/**\n * Generates a command in the form of array of strings, compatible with {@link call} from given command line string . The string must contain only one command (no newlines).\n */\nfunction cliToArrayOne(cliCommand: string): Command {\n  let inString = false\n  const spaceIndexes = [0]\n  for (let index = 0; index < cliCommand.length; index++) {\n    const c = cliCommand[index]\n    if (c.match(/[\\s]/im) && !inString) {\n      spaceIndexes.push(index)\n    }\n    if (c === `'`) {\n      inString = !inString\n    }\n  }\n  spaceIndexes.push(cliCommand.length)\n  const command = spaceIndexes\n    .map((spaceIndex, i) => cliCommand.substring(i === 0 ? 0 : spaceIndexes[i - 1], spaceIndexes[i]).trim())\n    .filter(s => !!s)\n\n    // remove quotes\n    .map(s => s.startsWith(`'`) ? s.substring(1, s.length) : s)\n    .map(s => s.endsWith(`'`) ? s.substring(0, s.length - 1) : s)\n\n    //  unescape parenthesis\n    .map(s => s === `\\\\(` ? `(` : s === `\\\\)` ? `)` : s)\n\n  return command\n}\n\n/**\n * Generates a command in the form of `string[][]` that is compatible with {@link call} from given command line string.\n * This works for strings containing multiple commands in different lines. and also respect `\\` character for continue the same\n * command in a new line. See {@link ExecuteCommand} for more information.\n */\nexport function cliToArray(cliCommand: string): Command[] {\n  const lines = cliCommand.split('\\n')\n    .map(s => s.trim()).map(cliToArrayOne)\n    .filter(a => a && a.length)\n  const result = []\n  let currentCommand: Command = []\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i]\n    if (line[line.length - 1] !== '\\\\') {\n      currentCommand = currentCommand.concat(line)\n      result.push(currentCommand)\n      currentCommand = []\n    }\n    else {\n      currentCommand = currentCommand.concat(line.slice(0, line.length - 1))\n    }\n  }\n  return result\n}\n\n/**\n * Makes sure that given {@link ExecuteCommand}, in whatever syntax, is transformed to the form `string[][]` that is compatible with {@link call}\n */\nexport function asCommand(c: ExecuteCommand): Command[] {\n  if (typeof c === 'string') { return asCommand([c]) }\n  if (!c[0]) { return [] }\n  if (typeof c[0] === 'string') {\n    return flat((c as string[]).map((subCommand: string) => cliToArray(subCommand)))\n  }\n  return c as Command[]\n}\n","import { MagickInputFile, MagickOutputFile, MagickFile } from '..'\nimport { execute } from '../execute'\n\nfunction blobToUint8Array(blob: Blob): Promise<Uint8Array> {\n  return new Promise(resolve => {\n    const fileReader = new FileReader()\n    fileReader.onload = event => {\n      const result = (event.target as any).result as ArrayBuffer\n      resolve(new Uint8Array(result))\n    }\n    fileReader.readAsArrayBuffer(blob)\n  })\n}\n\nexport function blobToString(blb: Blob): Promise<string> {\n  return new Promise(resolve => {\n    const reader = new FileReader()\n    reader.addEventListener('loadend', e => {\n      const text = (e.srcElement as any).result as string\n      resolve(text)\n    })\n    reader.readAsText(blb)\n  })\n}\n\nexport function isInputFile(file: MagickFile): file is MagickInputFile {\n  return !!(file as MagickInputFile).content\n}\nexport function isOutputFile(file: MagickFile): file is MagickOutputFile {\n  return !!(file as MagickOutputFile).blob\n}\n\nfunction uint8ArrayToString(arr: Uint8Array, charset: string = 'utf-8'): string {\n  return new TextDecoder(charset).decode(arr)\n}\n\n/**\n * Read files as string. Useful when files contains plain text like in the output file info.txt of `convert logo: -format '%[pixel:p{0,0}]' info:info.txt`\n */\nexport async function readFileAsText(file: MagickFile): Promise<string> {\n  if (isInputFile(file)) {\n    return uint8ArrayToString(file.content)\n  }\n  if (isOutputFile(file)) {\n    return await blobToString(file.blob)\n  }\n}\n\nexport async function isImage(file: MagickFile): Promise<boolean> {\n  const {exitCode} = await execute({inputFiles: [await asInputFile(file)], commands: `identify ${file.name}`})\n  return exitCode === 0\n}\n/**\n * Builds a new {@link MagickInputFile} by fetching the content of given url and optionally naming the file using given name\n * or extracting the file name from the url otherwise.\n */\nexport async function buildInputFile(url: string, name: string = getFileName(url)): Promise<MagickInputFile> {\n  const fetchedSourceImage = await fetch(url)\n  const arrayBuffer = await fetchedSourceImage.arrayBuffer()\n  const content = new Uint8Array(arrayBuffer)\n  return { name, content }\n}\n\nfunction uint8ArrayToBlob(arr: Uint8Array): Blob {\n  return new Blob([arr])\n}\n\nasync function outputFileToInputFile(file: MagickOutputFile, name: string = file.name): Promise<MagickInputFile> {\n  return {\n    name,\n    content: await blobToUint8Array(file.blob),\n  }\n}\n\nfunction inputFileToOutputFile(file: MagickInputFile, name: string = file.name): MagickOutputFile {\n  return {\n    name,\n    blob: uint8ArrayToBlob(file.content),\n  }\n}\n\nexport async function asInputFile(f: MagickFile, name: string = f.name): Promise<MagickInputFile> {\n  let inputFile: MagickInputFile\n  if (isOutputFile(f)) {\n    inputFile = await outputFileToInputFile(f)\n  }\n  else {\n    inputFile = f as MagickInputFile\n  }\n  inputFile.name = name\n  return inputFile\n}\n\nexport async function asOutputFile(f: MagickFile, name: string = f.name): Promise<MagickOutputFile> {\n  let outputFile: MagickOutputFile\n  if (isInputFile(f)) {\n    outputFile = inputFileToOutputFile(f)\n  }\n  else {\n    outputFile = f as MagickOutputFile\n  }\n  outputFile.name = name\n  return outputFile\n}\n\nexport function getFileName(url: string): string {\n  try {\n    return decodeURIComponent(new URL(url).pathname.split('/').pop())\n  } catch (error) {\n    const s = `http://foo.com/${url}`\n    try {\n      return decodeURIComponent(new URL(s).pathname.split('/').pop())\n    } catch (error) {\n      return url\n    }\n  }\n}\nexport function getFileNameExtension(filePathOrUrl: string) {\n  const s = getFileName(filePathOrUrl)\n  return s.substring(s.lastIndexOf('.') + 1, s.length)\n}\n","import { asInputFile, asOutputFile, execute, getFileNameExtension, MagickFile, MagickInputFile } from '..'\n\n// utilities related to HTML (img) elements\n\n/**\n * Will load given html img element src with the inline image content.\n * @param image the image to be loaded\n * @param el the html image element in which to load the image\n * @param forceBrowserSupport if true and the image extension is not supported by browsers, it will convert the image to png\n * and return that src so it can be shown in browsers\n */\nexport async function loadImageElement(image: MagickFile, el: HTMLImageElement, forceBrowserSupport: boolean = false) {\n  el.src = await buildImageSrc(image, forceBrowserSupport)\n}\n\n/**\n * Return a string with the inline image content, suitable to be used to assign to an html img src attribute. See {@link loadImageElement}.\n * @param forceBrowserSupport if true and the image extension is not supported by browsers, it will convert the image to png\n * and return that src so it can be shown in browsers\n */\nexport async function buildImageSrc(image: MagickFile, forceBrowserSupport: boolean = false): Promise<string> {\n  let img = image\n  const extension = getFileNameExtension(image.name)\n  if (!extension || forceBrowserSupport && browserSupportedImageExtensions.indexOf(extension) === -1) {\n    const { outputFiles } = await execute({ inputFiles: [await asInputFile(image)], commands: `convert ${image.name} output.png` })\n    outputFiles[0].name = image.name\n    img = outputFiles[0]\n  }\n  const outputFile = await asOutputFile(img)\n  return URL.createObjectURL(outputFile.blob)\n}\n/**\n * Build `MagickInputFile[]` from given HTMLInputElement of type=file that user may used to select several files\n */\nexport async function getInputFilesFromHtmlInputElement(el: HTMLInputElement): Promise<MagickInputFile[]> {\n  const files = await inputFileToUint8Array(el)\n  return files.map(f => ({ name: f.file.name, content: f.content }))\n}\n\nconst browserSupportedImageExtensions = ['gif', 'png', 'jpg', 'webp']\n\nfunction inputFileFiles(el: HTMLInputElement): File[] {\n  const files = []\n  for (let i = 0; i < el.files.length; i++) {\n    const file = el.files.item(i)\n    files.push(file)\n  }\n  return files\n}\n\nasync function inputFileToUint8Array(el: HTMLInputElement): Promise<{ file: File, content: Uint8Array }[]> {\n  return Promise.all(inputFileFiles(el).map(async file => {\n    const content = await new Promise<Uint8Array>(resolve => {\n      const reader = new FileReader()\n      reader.addEventListener('loadend', e => {\n        resolve(new Uint8Array(reader.result as any))\n      })\n      reader.readAsArrayBuffer(file)\n    })\n    return { file, content }\n  }))\n}\n","import { MagickFile, executeAndReturnOutputFile, asInputFile } from '../'\nimport { readFileAsText } from './file'\n\nexport async function getPixelColor(img: MagickFile, x: number, y: number): Promise<string> {\n  const file = await executeAndReturnOutputFile({inputFiles: [await asInputFile(img)], commands: `convert ${img.name} -format '%[pixel:p{${x},${y}}]' info:info.txt`})\n  return await readFileAsText(file)\n}\n","import pMap from 'p-map'\nimport { asInputFile, execute, extractInfo, MagickInputFile } from '..'\n\nlet builtInImages: MagickInputFile[]\nexport const builtInImageNames = ['rose:', 'logo:', 'wizard:', 'granite:', 'netscape:']\n\n/**\n * Gets ImageMagick built-in images like `rose:`, `logo:`, etc in the form of {@link MagickInputFile}s\n */\nexport async function getBuiltInImages(): Promise<MagickInputFile[]> {\n  if (!builtInImages) {\n    builtInImages = await pMap(builtInImageNames, async name => {\n      const info = await extractInfo(name)\n      const {outputFiles} = await execute({commands: `convert ${name} ${`output1.${info[0].image.format.toLowerCase()}`}`} )\n      outputFiles[0].name = name\n      return await asInputFile(outputFiles[0])\n    })\n  }\n  return builtInImages\n}\n\n/**\n * shortcut of {@link getBuiltInImages} to get a single image by name\n */\nexport async function getBuiltInImage(name: string): Promise<MagickInputFile> {\n  const images = await getBuiltInImages()\n  return images.find(f => f.name === name)\n}\n","import { asInputFile, Call, MagickFile, blobToString, MagickInputFile } from '..'\n\n/**\n * Compare the two images and return true if they are equal visually. Optionally, a margin of error can be provided using `fuzz`\n */\nexport async function compare(img1: MagickFile | string, img2: MagickFile | string, fuzz: number = 0.015): Promise<boolean> {\n  const identical = await compareNumber(img1, img2)\n  return identical <= fuzz\n}\n\nexport async function compareNumber(img1: MagickFile | string, img2: MagickFile | string): Promise<number> {\n  const imgs: MagickInputFile[] = []\n  let name1: string\n  let name2: string\n  if (typeof img1 !== 'string') {\n    const inputFile = await asInputFile(img1)\n    imgs.push(inputFile)\n    name1 = inputFile.name\n  }\n  else {\n    name1 = img1\n  }\n  if (typeof img2 !== 'string') {\n    const inputFile = await asInputFile(img2)\n    imgs.push(inputFile)\n    name2 = inputFile.name\n  }\n  else {\n    name2 = img2\n  }\n  const result = await Call(imgs,\n    ['convert', name1, name2, '-resize', '256x256^!', '-metric', 'RMSE', '-format', '%[distortion]', '-compare', 'info:info.txt'],\n  )\n  const n = await blobToString(result[0].blob)\n  return parseFloat(n)\n}\n","import { asInputFile, Call, MagickFile, blobToString, MagickInputFile } from '..'\nimport { ExtractInfoResult } from './imageExtractInfoTypes'\n\n/**\n * Execute `convert $IMG info.json` to extract image metadata. Returns the parsed info.json file contents\n * @param img could be a string in case you want to extract information about built in images like `rose:`\n */\nexport async function extractInfo(img: MagickFile|string): Promise<ExtractInfoResult[]> {\n\n  // TODO: support several input images - we are already returning an array\n\n  let name: string\n  let imgs: MagickInputFile[]\n  if (typeof img !== 'string') {\n    imgs = [await asInputFile(img)]\n    name = imgs[0].name\n  }\n  else {\n    name = img\n    imgs = []\n  }\n  const processedFiles = await Call(imgs, ['convert', name, 'info.json'])\n  try {\n    return JSON.parse(await blobToString(processedFiles[0].blob))\n  } catch (ex) {\n    return [{error: ex}]\n  }\n}\n","import { execute } from '../'\n\nexport async function getConfigureFolders(): Promise<string[]> {\n  const result = await execute(`convert -debug configure rose: info:`)\n  const contains = `Searching for configure file:`\n  const folders = result.stderr\n    .filter(line => line.includes(contains))\n    .map(line => line.substring(line.indexOf(contains) + contains.length, line.length))\n    .map(s => s.replace(/\\/\\//g, '/'))\n    .map(s => s.substring(0, s.lastIndexOf('/')))\n    .map(s => s.replace(/\"/g, '').trim())\n  return folders\n\n}\n\n// has some heuristic information regarding features (not) supported by wasm-imagemagick, for example, image formats\n\n// heads up - all images spec/assets/to_rotate.* where converted using gimp unless explicitly saying otherwise\n/**\n * list of image formats that are known to be supported by wasm-imagemagick. See `spec/formatSpec.ts`\n */\nexport const knownSupportedReadWriteImageFormats = [\n  'jpg', 'png',\n  'psd',\n  'tiff', 'xcf', 'gif', 'bmp', 'tga', 'miff', 'ico', 'dcm', 'xpm', 'pcx',\n  //  'pix', // gives error\n  'fits',\n  // 'djvu', // read only support\n  'ppm',\n  'pgm',\n  'pfm',\n  'mng',\n  'hdr',\n  'dds', // generated using convert -define \"dds:compression={dxt1, dxt5, none}\" to_rotate.png  to_rotate.dds\n  'otb', // generated using convert to_rotate.png  to_rotate.otb\n\n  'txt', // generated using convert to_rotate.png  to_rotate.txt\n\n  // 'rgb', // fails because  MustSpecifyImageSize `to_rotate.rgb'\n]\n","import { MagickInputFile, MagickOutputFile, call, asCommand } from '.'\nimport pMap from 'p-map'\nimport { CallResult } from './magickApi'\nimport { values } from './util/misc'\nimport { asInputFile } from './util'\n\nexport type Command = (string | number)[]\n\nexport interface ExecuteConfig {\n  inputFiles?: MagickInputFile[]\n  /**\n   */\n  commands: ExecuteCommand\n}\n\n/**\n *\n * Commands could have the following syntaxes:\n *  * array form like `[['convert', 'foo.png', 'bar.gif'], ['identify', 'bar.gif']]`\n *  * just one array: `['convert', 'foo.png', 'bar.gif']`\n *  * command line strings: `['convert foo.png bar.gif', 'idenfity bar.gif']`\n *  * just one string: `'convert foo.png bar.gif'`\n *\n * Also, for command line strings, multiple commands can be specified in the same string separating with new lines:\n *\n * ```js\n * const result = await execute(`\n *   convert rose: -sharpen 0x1 reconstruct.jpg\n *   compare rose: reconstruct.jpg difference.png\n *   compare -compose src rose: reconstruct.jpg difference.png\n * `)\n * ```\n *\n * Also, command line strings support breaking the same command in multiple lines by using `\\` like in:\n *\n * ```js\n * const result = await execute(`\n *   convert -size 250x100 xc: +noise Random -channel R -threshold .4% \\\\\n *     -negate -channel RG -separate +channel \\\\\n *     \\( +clone \\) -compose multiply -flatten \\\\\n *     -virtual-pixel Tile -background Black \\\\\n *     -blur 0x.6 -motion-blur 0x15-90 -normalize \\\\\n *     +distort Polar 0 +repage 'star inward.gif'\n * `)\n * ```\n *\n * If you need to escape arguments like file names with spaces, use single quotes `'`, like the output file in the previous example `'star inward.gif'`\n */\nexport type ExecuteCommand = Command[] | Command | string\n\nexport interface ExecuteResultOne extends CallResult {\n  errors: any[]\n  exitCode: number\n}\n\n/**\n * Execute first command in given config.\n */\nexport async function executeOne(configOrCommand: ExecuteConfig | ExecuteCommand): Promise<ExecuteResultOne> {\n  const config = asExecuteConfig(configOrCommand)\n  let result: CallResult = {\n    stderr: [],\n    stdout: [],\n    outputFiles: [],\n    exitCode: 1,\n  }\n  try {\n    config.inputFiles = config.inputFiles || []\n    const command = asCommand(config.commands)[0]\n    const t0 = performance.now()\n    executeListeners.forEach(listener => listener.beforeExecute({ command, took: performance.now() - t0, id: t0 }))\n    result = await call(config.inputFiles, command.map(c => c + ''))\n    executeListeners.forEach(listener => listener.afterExecute({ command, took: performance.now() - t0, id: t0 }))\n    if (result.exitCode) {\n      return { ...result, errors: ['exit code: ' + result.exitCode + ' stderr: ' + result.stderr.join('\\n')] }\n    }\n    return { ...result, errors: [undefined] }\n\n  } catch (error) {\n    return { ...result, errors: [error + ', exit code: ' + result.exitCode + ', stderr: ' + result.stderr.join('\\n')] }\n  }\n}\n\nexport function isExecuteCommand(arg: any): arg is ExecuteConfig {\n  return !!arg.commands\n}\n\n/**\n * Transform  `configOrCommand: ExecuteConfig | ExecuteCommand` to a valid ExecuteConfig object\n */\nexport function asExecuteConfig(arg: ExecuteConfig | ExecuteCommand): ExecuteConfig {\n  if (isExecuteCommand(arg)) {\n    return arg\n  }\n  return {\n    inputFiles: [],\n    commands: arg,\n  }\n}\n\n/**\n * `execute()` shortcut that useful for commands that return only one output file or when only one particular output file is relevant.\n * @param outputFileName optionally user can give the desired output file name\n * @returns If `outputFileName` is given the file with that name, the first output file otherwise or undefined\n * if no file match, or no output files where generated (like in an error).\n */\nexport async function executeAndReturnOutputFile(configOrCommand: ExecuteConfig | ExecuteCommand, outputFileName?: string): Promise<MagickOutputFile | undefined> {\n  const config = asExecuteConfig(configOrCommand)\n  const result = await execute(config)\n  return outputFileName ? result.outputFiles.find(f => f.name === outputFileName) : (result.outputFiles.length && result.outputFiles[0] || undefined)\n}\n\n// execute event emitter\n\nexport interface ExecuteEvent {\n  command: Command\n  took: number\n  id: number\n}\n\nexport interface ExecuteListener {\n  afterExecute?(event: ExecuteEvent): void\n  beforeExecute?(event: ExecuteEvent): void\n}\n\nconst executeListeners: ExecuteListener[] = []\n\nexport function addExecuteListener(l: ExecuteListener) {\n  executeListeners.push(l)\n}\n\nexport interface ExecuteResult extends ExecuteResultOne {\n  results: ExecuteResultOne[]\n  // breakOnError?: boolean\n}\n\n/**\n * Execute all commands in given config serially in order. Output files from a command become available as\n * input files in next commands. In the following example we execute two commands. Notice how the second one uses `image2.png` which was the output file of the first one:\n *\n * ```ts\n * const { outputFiles, exitCode, stderr} = await execute({\n *   inputFiles: [await buildInputFile('fn.png', 'image1.png')],\n *   commands: `\n *     convert image1.png -bordercolor #ffee44 -background #eeff55 +polaroid image2.png\n *     convert image2.png -fill #997711 -tint 55 image3.jpg\n * `\n * })\n * if (exitCode) {\n *   alert(`There was an error with the command: ${stderr.join('\\n')}`)\n * }\n * else {\n *   await loadImageElement(outputFiles.find(f => f.name==='image3.jpg'), document.getElementById('outputImage'))\n * }\n * ```\n *\n * See {@link ExecuteCommand} for different command syntax supported.\n *\n * See {@link ExecuteResult} for details on the object returned\n */\n\nexport async function execute(configOrCommand: ExecuteConfig | ExecuteCommand): Promise<ExecuteResult> {\n  const config = asExecuteConfig(configOrCommand)\n  config.inputFiles = config.inputFiles || []\n  const allOutputFiles: { [name: string]: MagickOutputFile } = {}\n  const allInputFiles: { [name: string]: MagickInputFile } = {}\n  config.inputFiles.forEach(f => {\n    allInputFiles[f.name] = f\n  })\n  let allErrors = []\n  const results: ExecuteResultOne[] = []\n  let allStdout = []\n  let allStderr = []\n  async function mapper(c: Command) {\n    const thisConfig = {\n      inputFiles: values(allInputFiles),\n      commands: [c],\n    }\n    const result = await executeOne(thisConfig)\n    results.push(result)\n    allErrors = allErrors.concat(result.errors || [])\n    allStdout = allStdout.concat(result.stdout || [])\n    allStderr = allStderr.concat(result.stderr || [])\n    await pMap(result.outputFiles, async f => {\n      allOutputFiles[f.name] = f\n      const inputFile = await asInputFile(f)\n      allInputFiles[inputFile.name] = inputFile\n    })\n  }\n  const commands = asCommand(config.commands)\n  await pMap(commands, mapper, { concurrency: 1 })\n  const resultWithError = results.find(r => r.exitCode !== 0)\n  return {\n    outputFiles: values(allOutputFiles),\n    errors: allErrors,\n    results,\n    stdout: allStdout,\n    stderr: allStderr,\n    exitCode: resultWithError ? resultWithError.exitCode : 0,\n  }\n}\n","import { MagickInputFile, MagickFile, asInputFile, getBuiltInImages } from '.'\nimport pMap from 'p-map'\nimport { values } from './util/misc'\n\n/**\n * Manager for `MagickFiles`.\n */\nexport interface ImageHome {\n  /**\n   * Get a file by name.\n   */\n  get(name: string): Promise<MagickInputFile>\n\n  /**\n   * Programmatically add new files.\n   */\n  register(file: MagickFile, name?: string): void\n  isRegistered(name: string): boolean\n  /**\n   * Get all the files currently available in this context.\n   */\n  getAll(): Promise<MagickInputFile[]>\n  /**\n   * Add ImageMagick built-in images like `rose:`, `logo:`, etc to this execution context so they are present in `getAll()`.\n   */\n  addBuiltInImages(): Promise<void>\n  /**\n   * Remove files by name.\n   * @returns the files actually removed.\n   */\n  remove(names: string[]): MagickInputFile[]\n}\n\ntype MagickInputFilePromise = Promise<MagickInputFile> & { resolved: true }\n\nclass ImageHomeImpl implements ImageHome {\n\n  private images: { [name: string]: MagickInputFilePromise } = {}\n  private builtInImagesAdded: boolean = false\n\n  get(name: string): Promise<MagickInputFile> {\n    return this.images[name]\n  }\n\n  remove(names: string[]): MagickInputFile[] {\n    const result = []\n    Object.keys(this.images).forEach(name => {\n      if (names.indexOf(name) !== -1) {\n        result.push(this.images[name])\n        delete this.images[name]\n      }\n    })\n    return result\n  }\n\n  async getAll(): Promise<MagickInputFile[]> {\n    return await Promise.all(values(this.images))\n  }\n\n  register(file: MagickFile, name: string = file.name): MagickInputFilePromise {\n    const promise = asInputFile(file) as MagickInputFilePromise\n    this.images[name] = promise\n    this.images[name].then(() => {\n      promise.resolved = true\n    })\n    return promise\n  }\n\n  isRegistered(name: string, andReady: boolean = true): boolean {\n    return this.images[name] && (andReady && this.images[name].resolved)\n  }\n\n  async addBuiltInImages() {\n    if (!this.builtInImagesAdded) {\n      await pMap(await getBuiltInImages(), img => this.register(img))\n      this.builtInImagesAdded = true\n    }\n  }\n\n}\nexport function createImageHome() { return new ImageHomeImpl() }\n","import { createImageHome, execute, ExecuteCommand, ExecuteConfig, ExecuteResult, ImageHome, MagickFile, MagickInputFile } from '.'\nimport { asExecuteConfig } from './execute'\n\n/**\n * Allow multiple execute() calls remembering previous execute() generated output files and previous given input files that\n * can be used as input files in next calls.\n */\nexport interface ExecutionContext {\n  /**\n   * This behaves almost the same as [execute](https://github.com/KnicKnic/WASM-ImageMagick/tree/master/apidocs#execute).\n   */\n  execute(configOrCommands: ExecuteConfig | ExecuteCommand | string): Promise<ExecuteResult>\n\n  /**\n   * Programmatically add new files so they are available if following `execute()` calls.\n   */\n  addFiles(files: MagickFile[]): void\n\n  /**\n   * Get all the files currently available in this context.\n   */\n  getAllFiles(): Promise<MagickInputFile[]>\n\n  /**\n   * Add ImageMagick built-in images like `rose:`, `logo:`, etc to this execution context so they are present in `getAllFiles()`.\n   */\n  addBuiltInImages(): Promise<void>\n\n  /**\n   * Get a file by name or undefined if none.\n   */\n  getFile(name: string): Promise<MagickInputFile|undefined>\n\n  /**\n   * Remove files by name.\n   * @returns the files actually removed.\n   */\n  removeFiles(names: string[]): MagickInputFile[]\n}\n\nclass ExecutionContextImpl implements ExecutionContext {\n\n  constructor(private imageHome: ImageHome = createImageHome()) {\n  }\n\n  async execute(configOrCommands: ExecuteConfig | ExecuteCommand | string): Promise<ExecuteResult> {\n    const config = asExecuteConfig(configOrCommands)\n    config.inputFiles.forEach(f => {\n      this.imageHome.register(f)\n    })\n    const inputFiles = await this.imageHome.getAll()\n    const result = await execute({ ...config, inputFiles })\n    result.outputFiles.forEach(f => {\n      this.imageHome.register(f)\n    })\n    return result\n  }\n\n  addFiles(files: MagickFile[]) {\n    files.forEach(f => this.imageHome.register(f))\n  }\n\n  async getAllFiles(): Promise<MagickInputFile[]> {\n    return await this.imageHome.getAll()\n  }\n\n  async getFile(name: string): Promise<MagickInputFile> {\n    return await this.imageHome.get(name)\n  }\n\n  async addBuiltInImages() {\n    return this.imageHome.addBuiltInImages()\n  }\n\n  removeFiles(names: string[]): MagickInputFile[] {\n    return this.imageHome.remove(names)\n  }\n\n  static create(inheritFrom?: ExecutionContext) {\n    if (inheritFrom && !(inheritFrom as ExecutionContextImpl).imageHome) {\n      throw new Error('Dont know how to inherit from other ExecutionContext implementation than this one')\n    }\n    return new ExecutionContextImpl(inheritFrom && (inheritFrom as ExecutionContextImpl).imageHome)\n  }\n\n}\n\nexport function newExecutionContext(inheritFrom?: ExecutionContext): ExecutionContext {\n  return ExecutionContextImpl.create(inheritFrom)\n}\n","/**\r\n * Base class for ImageMagick input and output files.\r\n */\r\nexport interface MagickFile {\r\n  name: string\r\n}\r\n\r\n/**\r\n * Represents output files generated when an ImageMagick command executes.\r\n */\r\nexport interface MagickOutputFile extends MagickFile {\r\n  blob: Blob\r\n}\r\n\r\n/**\r\n * Represents input files that need to be provided to {@link call} or [execute](https://github.com/KnicKnic/WASM-ImageMagick/tree/master/apidocs#execute).\r\n *\r\n * Can be builded using {@link buildInputFile}\r\n */\r\nexport interface MagickInputFile extends MagickFile {\r\n  content: Uint8Array\r\n}\r\n\r\n/**\r\n * {@link call} shortcut that only returns the output files.\r\n */\r\nexport async function Call(inputFiles: MagickInputFile[], command: string[]): Promise<MagickOutputFile[]> {\r\n  const result = await call(inputFiles, command)\r\n  return result.outputFiles\r\n}\r\n\r\n/**\r\n * The result of calling {@link call}. Also the base class of results of calling [execute](https://github.com/KnicKnic/WASM-ImageMagick/tree/master/apidocs#execute).\r\n */\r\nexport interface CallResult {\r\n  /**\r\n   * Output files generated by the command, if any\r\n   */\r\n  outputFiles: MagickOutputFile[]\r\n  /**\r\n   * Output printed by the command to stdout. For example the command `identify rose:` will print useful information to stdout\r\n   */\r\n  stdout: string[]\r\n  /**\r\n   * Output printed by the command to stderr. If `exitCode != 0` then this property could have some information about the error.\r\n   */\r\n  stderr: string[]\r\n  /**\r\n   * Exit code of the command executed. If 0 the command executed successfully, otherwise an error occurred and `stderr` could have some information about what was wrong\r\n   */\r\n  exitCode: number\r\n}\r\n\r\n/**\r\n * Low level execution function. All the other functions like [execute](https://github.com/KnicKnic/WASM-ImageMagick/tree/master/apidocs#execute)\r\n * ends up calling this one. It accept only one command and only in the form of array of strings.\r\n */\r\nexport function call(inputFiles: MagickInputFile[], command: string[]): Promise<CallResult> {\r\n  const request = {\r\n    files: inputFiles,\r\n    args: command,\r\n    requestNumber: magickWorkerPromisesKey,\r\n  }\r\n  const promise = CreatePromiseEvent()\r\n  magickWorkerPromises[magickWorkerPromisesKey] = promise\r\n  magickWorker.postMessage(request)\r\n  magickWorkerPromisesKey++\r\n  return promise as Promise<CallResult>\r\n}\r\n\r\nfunction CreatePromiseEvent() {\r\n  let resolver\r\n  let rejecter\r\n  const emptyPromise = new Promise((resolve, reject) => {\r\n    resolver = resolve\r\n    rejecter = reject\r\n  }) as Promise<{}> & { resolve?: any, reject?: any }\r\n  emptyPromise.resolve = resolver\r\n  emptyPromise.reject = rejecter\r\n  return emptyPromise\r\n}\r\n\r\nconst magickWorker = new Worker('magick.js')\r\n\r\nconst magickWorkerPromises = {}\r\nlet magickWorkerPromisesKey = 1\r\n\r\n// handle responses as they stream in after being outputFiles by image magick\r\nmagickWorker.onmessage = e => {\r\n  const response = e.data\r\n  const promise = magickWorkerPromises[response.requestNumber]\r\n  delete magickWorkerPromises[response.requestNumber]\r\n  const result = {\r\n    outputFiles: response.outputFiles,\r\n    stdout: response.stdout,\r\n    stderr: response.stderr,\r\n    exitCode: response.exitCode || 0,\r\n  }\r\n  promise.resolve(result)\r\n}\r\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMAlign {\n  'Center' = 'Center',\n  'End' = 'End',\n  'Left' = 'Left',\n  'Middle' = 'Middle',\n  'Right' = 'Right',\n  'Start' = 'Start',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMAlpha {\n  'Activate' = 'Activate',\n  'Associate' = 'Associate',\n  'Background' = 'Background',\n  'Copy' = 'Copy',\n  'Deactivate' = 'Deactivate',\n  'Discrete' = 'Discrete',\n  'Disassociate' = 'Disassociate',\n  'Extract' = 'Extract',\n  'Off' = 'Off',\n  'On' = 'On',\n  'Opaque' = 'Opaque',\n  'Remove' = 'Remove',\n  'Set' = 'Set',\n  'Shape' = 'Shape',\n  'Transparent' = 'Transparent',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMAutoThreshold {\n  'Kapur' = 'Kapur',\n  'OTSU' = 'OTSU',\n  'Triangle' = 'Triangle',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMBoolean {\n  'False' = 'False',\n  'True' = 'True',\n  '0_' = '0',\n  '1_' = '1',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMCache {\n  'Disk' = 'Disk',\n  'Distributed' = 'Distributed',\n  'Map' = 'Map',\n  'Memory' = 'Memory',\n  'Ping' = 'Ping',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMChannel {\n  'All' = 'All',\n  'Sync' = 'Sync',\n  'Default' = 'Default',\n  'A' = 'A',\n  'Alpha' = 'Alpha',\n  'Black' = 'Black',\n  'B' = 'B',\n  'Blue' = 'Blue',\n  'C' = 'C',\n  'Chroma' = 'Chroma',\n  'Cyan' = 'Cyan',\n  'Gray' = 'Gray',\n  'G' = 'G',\n  'Green' = 'Green',\n  'H' = 'H',\n  'Hue' = 'Hue',\n  'K' = 'K',\n  'L' = 'L',\n  'Lightness' = 'Lightness',\n  'Luminance' = 'Luminance',\n  'M' = 'M',\n  'Magenta' = 'Magenta',\n  'Meta' = 'Meta',\n  'R' = 'R',\n  'Red' = 'Red',\n  'S' = 'S',\n  'Saturation' = 'Saturation',\n  'Y' = 'Y',\n  'Yellow' = 'Yellow',\n  '0_' = '0',\n  '1_' = '1',\n  '2_' = '2',\n  '3_' = '3',\n  '4_' = '4',\n  '5_' = '5',\n  '6_' = '6',\n  '7_' = '7',\n  '8_' = '8',\n  '9_' = '9',\n  '10_' = '10',\n  '11_' = '11',\n  '12_' = '12',\n  '13_' = '13',\n  '14_' = '14',\n  '15_' = '15',\n  '16_' = '16',\n  '17_' = '17',\n  '18_' = '18',\n  '19_' = '19',\n  '20_' = '20',\n  '21_' = '21',\n  '22_' = '22',\n  '23_' = '23',\n  '24_' = '24',\n  '25_' = '25',\n  '26_' = '26',\n  '27_' = '27',\n  '28_' = '28',\n  '29_' = '29',\n  '30_' = '30',\n  '31_' = '31',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMClass {\n  'DirectClass' = 'DirectClass',\n  'PseudoClass' = 'PseudoClass',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMClipPath {\n  'ObjectBoundingBox' = 'ObjectBoundingBox',\n  'UserSpace' = 'UserSpace',\n  'UserSpaceOnUse' = 'UserSpaceOnUse',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMColorspace {\n  'CIELab' = 'CIELab',\n  'CMY' = 'CMY',\n  'CMYK' = 'CMYK',\n  'Gray' = 'Gray',\n  'HCL' = 'HCL',\n  'HCLp' = 'HCLp',\n  'HSB' = 'HSB',\n  'HSI' = 'HSI',\n  'HSL' = 'HSL',\n  'HSV' = 'HSV',\n  'HWB' = 'HWB',\n  'Lab' = 'Lab',\n  'LCH' = 'LCH',\n  'LCHab' = 'LCHab',\n  'LCHuv' = 'LCHuv',\n  'LinearGray' = 'LinearGray',\n  'LMS' = 'LMS',\n  'Log' = 'Log',\n  'Luv' = 'Luv',\n  'OHTA' = 'OHTA',\n  'Rec601YCbCr' = 'Rec601YCbCr',\n  'Rec709YCbCr' = 'Rec709YCbCr',\n  'RGB' = 'RGB',\n  'scRGB' = 'scRGB',\n  'sRGB' = 'sRGB',\n  'Transparent' = 'Transparent',\n  'xyY' = 'xyY',\n  'XYZ' = 'XYZ',\n  'YCbCr' = 'YCbCr',\n  'YDbDr' = 'YDbDr',\n  'YCC' = 'YCC',\n  'YIQ' = 'YIQ',\n  'YPbPr' = 'YPbPr',\n  'YUV' = 'YUV',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMCommand {\n  '-alpha' = '-alpha',\n  '+background' = '+background',\n  '-background' = '-background',\n  '+format' = '+format',\n  '-format' = '-format',\n  '-quiet' = '-quiet',\n  '+quiet' = '+quiet',\n  '-regard-warnings' = '-regard-warnings',\n  '+regard-warnings' = '+regard-warnings',\n  '+repage' = '+repage',\n  '-repage' = '-repage',\n  '+size' = '+size',\n  '-size' = '-size',\n  '+virtual-pixel' = '+virtual-pixel',\n  '-virtual-pixel' = '-virtual-pixel',\n  '-blur' = '-blur',\n  '-resize' = '-resize',\n  '-adaptive-blur' = '-adaptive-blur',\n  '-adaptive-resize' = '-adaptive-resize',\n  '-adaptive-sharpen' = '-adaptive-sharpen',\n  '-adjoin' = '-adjoin',\n  '+adjoin' = '+adjoin',\n  '+mattecolor' = '+mattecolor',\n  '-mattecolor' = '-mattecolor',\n  '-annotate' = '-annotate',\n  '-antialias' = '-antialias',\n  '+antialias' = '+antialias',\n  '-append' = '-append',\n  '+append' = '+append',\n  '+attenuate' = '+attenuate',\n  '-attenuate' = '-attenuate',\n  '+authenticate' = '+authenticate',\n  '-authenticate' = '-authenticate',\n  '-auto-gamma' = '-auto-gamma',\n  '-auto-level' = '-auto-level',\n  '-auto-orient' = '-auto-orient',\n  '-auto-threshold' = '-auto-threshold',\n  '+backdrop' = '+backdrop',\n  '-backdrop' = '-backdrop',\n  '-bench' = '-bench',\n  '+bias' = '+bias',\n  '-bias' = '-bias',\n  '-black-point-compensation' = '-black-point-compensation',\n  '+black-point-compensation' = '+black-point-compensation',\n  '-black-threshold' = '-black-threshold',\n  '+blend' = '+blend',\n  '-blend' = '-blend',\n  '+blue-primary' = '+blue-primary',\n  '-blue-primary' = '-blue-primary',\n  '-blue-shift' = '-blue-shift',\n  '+blue-shift' = '+blue-shift',\n  '-border' = '-border',\n  '+bordercolor' = '+bordercolor',\n  '-bordercolor' = '-bordercolor',\n  '+borderwidth' = '+borderwidth',\n  '-borderwidth' = '-borderwidth',\n  '-brightness-contrast' = '-brightness-contrast',\n  '+cache' = '+cache',\n  '-cache' = '-cache',\n  '+caption' = '+caption',\n  '-caption' = '-caption',\n  '-cdl' = '-cdl',\n  '+channel' = '+channel',\n  '-channel' = '-channel',\n  '-channel-fx' = '-channel-fx',\n  '-charcoal' = '-charcoal',\n  '-chop' = '-chop',\n  '-clamp' = '-clamp',\n  '-clip' = '-clip',\n  '+clip' = '+clip',\n  '+clip-mask' = '+clip-mask',\n  '-clip-mask' = '-clip-mask',\n  '-clip-path' = '-clip-path',\n  '+clip-path' = '+clip-path',\n  '+clone' = '+clone',\n  '-clone' = '-clone',\n  '-clut' = '-clut',\n  '-coalesce' = '-coalesce',\n  '-colorize' = '-colorize',\n  '+colormap' = '+colormap',\n  '-colormap' = '-colormap',\n  '-color-matrix' = '-color-matrix',\n  '-colors' = '-colors',\n  '+colorspace' = '+colorspace',\n  '-colorspace' = '-colorspace',\n  '-combine' = '-combine',\n  '+combine' = '+combine',\n  '+comment' = '+comment',\n  '-comment' = '-comment',\n  '-compare' = '-compare',\n  '-complex' = '-complex',\n  '+compose' = '+compose',\n  '-compose' = '-compose',\n  '-composite' = '-composite',\n  '+compress' = '+compress',\n  '-compress' = '-compress',\n  '-concurrent' = '-concurrent',\n  '-connected-components' = '-connected-components',\n  '-contrast-stretch' = '-contrast-stretch',\n  '-convolve' = '-convolve',\n  '-copy' = '-copy',\n  '-crop' = '-crop',\n  '-cycle' = '-cycle',\n  '+debug' = '+debug',\n  '-debug' = '-debug',\n  '-decipher' = '-decipher',\n  '-define' = '-define',\n  '+define' = '+define',\n  '+delay' = '+delay',\n  '-delay' = '-delay',\n  '+delete' = '+delete',\n  '-delete' = '-delete',\n  '+density' = '+density',\n  '-density' = '-density',\n  '+depth' = '+depth',\n  '-depth' = '-depth',\n  '+descend' = '+descend',\n  '-descend' = '-descend',\n  '+deskew' = '+deskew',\n  '-deskew' = '-deskew',\n  '-despeckle' = '-despeckle',\n  '+direction' = '+direction',\n  '-direction' = '-direction',\n  '+displace' = '+displace',\n  '-displace' = '-displace',\n  '-display' = '-display',\n  '+display' = '+display',\n  '+dispose' = '+dispose',\n  '-dispose' = '-dispose',\n  '+dissimilarity-threshold' = '+dissimilarity-threshold',\n  '-dissimilarity-threshold' = '-dissimilarity-threshold',\n  '+dissolve' = '+dissolve',\n  '-dissolve' = '-dissolve',\n  '-distort' = '-distort',\n  '+distort' = '+distort',\n  '+dither' = '+dither',\n  '-dither' = '-dither',\n  '-draw' = '-draw',\n  '+duplicate' = '+duplicate',\n  '-duplicate' = '-duplicate',\n  '-duration' = '-duration',\n  '+duration' = '+duration',\n  '-edge' = '-edge',\n  '-emboss' = '-emboss',\n  '-encipher' = '-encipher',\n  '+encoding' = '+encoding',\n  '-encoding' = '-encoding',\n  '+endian' = '+endian',\n  '-endian' = '-endian',\n  '-enhance' = '-enhance',\n  '-equalize' = '-equalize',\n  '-evaluate' = '-evaluate',\n  '-evaluate-sequence' = '-evaluate-sequence',\n  '-exit' = '-exit',\n  '-extent' = '-extent',\n  '+extract' = '+extract',\n  '-extract' = '-extract',\n  '-family' = '-family',\n  '+features' = '+features',\n  '-features' = '-features',\n  '-fft' = '-fft',\n  '+fft' = '+fft',\n  '+fill' = '+fill',\n  '-fill' = '-fill',\n  '+filter' = '+filter',\n  '-filter' = '-filter',\n  '-flatten' = '-flatten',\n  '-flip' = '-flip',\n  '-floodfill' = '-floodfill',\n  '+floodfill' = '+floodfill',\n  '-flop' = '-flop',\n  '+font' = '+font',\n  '-font' = '-font',\n  '+foreground' = '+foreground',\n  '-foreground' = '-foreground',\n  '-frame' = '-frame',\n  '-function' = '-function',\n  '+fuzz' = '+fuzz',\n  '-fuzz' = '-fuzz',\n  '-fx' = '-fx',\n  '-gamma' = '-gamma',\n  '+gamma' = '+gamma',\n  '-gaussian-blur' = '-gaussian-blur',\n  '+geometry' = '+geometry',\n  '-geometry' = '-geometry',\n  '+gravity' = '+gravity',\n  '-gravity' = '-gravity',\n  '-grayscale' = '-grayscale',\n  '+green-primary' = '+green-primary',\n  '-green-primary' = '-green-primary',\n  '-hald-clut' = '-hald-clut',\n  '+highlight-color' = '+highlight-color',\n  '-highlight-color' = '-highlight-color',\n  '+iconGeometry' = '+iconGeometry',\n  '-iconGeometry' = '-iconGeometry',\n  '-iconic' = '-iconic',\n  '+iconic' = '+iconic',\n  '-identify' = '-identify',\n  '-ift' = '-ift',\n  '+ift' = '+ift',\n  '-immutable' = '-immutable',\n  '+immutable' = '+immutable',\n  '-implode' = '-implode',\n  '+insert' = '+insert',\n  '-insert' = '-insert',\n  '+intensity' = '+intensity',\n  '-intensity' = '-intensity',\n  '+intent' = '+intent',\n  '-intent' = '-intent',\n  '+interlace' = '+interlace',\n  '-interlace' = '-interlace',\n  '+interline-spacing' = '+interline-spacing',\n  '-interline-spacing' = '-interline-spacing',\n  '+interpolate' = '+interpolate',\n  '-interpolate' = '-interpolate',\n  '-interpolative-resize' = '-interpolative-resize',\n  '+interword-spacing' = '+interword-spacing',\n  '-interword-spacing' = '-interword-spacing',\n  '+kerning' = '+kerning',\n  '-kerning' = '-kerning',\n  '-kuwahara' = '-kuwahara',\n  '+label' = '+label',\n  '-label' = '-label',\n  '-lat' = '-lat',\n  '-layers' = '-layers',\n  '-level' = '-level',\n  '+level' = '+level',\n  '-level-colors' = '-level-colors',\n  '+level-colors' = '+level-colors',\n  '-limit' = '-limit',\n  '-linear-stretch' = '-linear-stretch',\n  '-liquid-rescale' = '-liquid-rescale',\n  '-list' = '-list',\n  '-local-contrast' = '-local-contrast',\n  '+log' = '+log',\n  '-log' = '-log',\n  '+loop' = '+loop',\n  '-loop' = '-loop',\n  '+lowlight-color' = '+lowlight-color',\n  '-lowlight-color' = '-lowlight-color',\n  '-magnify' = '-magnify',\n  '+mask' = '+mask',\n  '-mask' = '-mask',\n  '+metric' = '+metric',\n  '-metric' = '-metric',\n  '+mode' = '+mode',\n  '-modulate' = '-modulate',\n  '-moments' = '-moments',\n  '+moments' = '+moments',\n  '-monitor' = '-monitor',\n  '+monitor' = '+monitor',\n  '+monochrome' = '+monochrome',\n  '-monochrome' = '-monochrome',\n  '-morph' = '-morph',\n  '-morphology' = '-morphology',\n  '-mosaic' = '-mosaic',\n  '-motion-blur' = '-motion-blur',\n  '+name' = '+name',\n  '-name' = '-name',\n  '+negate' = '+negate',\n  '-negate' = '-negate',\n  '-noise' = '-noise',\n  '+noise' = '+noise',\n  '-noop' = '-noop',\n  '-normalize' = '-normalize',\n  '-opaque' = '-opaque',\n  '+opaque' = '+opaque',\n  '-ordered-dither' = '-ordered-dither',\n  '+orient' = '+orient',\n  '-orient' = '-orient',\n  '+page' = '+page',\n  '-page' = '-page',\n  '-paint' = '-paint',\n  '+path' = '+path',\n  '-path' = '-path',\n  '+pause' = '+pause',\n  '-pause' = '-pause',\n  '-ping' = '-ping',\n  '+ping' = '+ping',\n  '+pointsize' = '+pointsize',\n  '-pointsize' = '-pointsize',\n  '+polaroid' = '+polaroid',\n  '-polaroid' = '-polaroid',\n  '-poly' = '-poly',\n  '-posterize' = '-posterize',\n  '+precision' = '+precision',\n  '-precision' = '-precision',\n  '-preview' = '-preview',\n  '-print' = '-print',\n  '-process' = '-process',\n  '+profile' = '+profile',\n  '-profile' = '-profile',\n  '+quality' = '+quality',\n  '-quality' = '-quality',\n  '+quantize' = '+quantize',\n  '-quantize' = '-quantize',\n  '-raise' = '-raise',\n  '+raise' = '+raise',\n  '-random-threshold' = '-random-threshold',\n  '-range-threshold' = '-range-threshold',\n  '-read' = '-read',\n  '+read-mask' = '+read-mask',\n  '-read-mask' = '-read-mask',\n  '+red-primary' = '+red-primary',\n  '-red-primary' = '-red-primary',\n  '+region' = '+region',\n  '-region' = '-region',\n  '+remap' = '+remap',\n  '-remap' = '-remap',\n  '+remote' = '+remote',\n  '-remote' = '-remote',\n  '-render' = '-render',\n  '+render' = '+render',\n  '-resample' = '-resample',\n  '-respect-parenthesis' = '-respect-parenthesis',\n  '+respect-parenthesis' = '+respect-parenthesis',\n  '-reverse' = '-reverse',\n  '-roll' = '-roll',\n  '-rotate' = '-rotate',\n  '-rotational-blur' = '-rotational-blur',\n  '-sample' = '-sample',\n  '+sampling-factor' = '+sampling-factor',\n  '-sampling-factor' = '-sampling-factor',\n  '-scale' = '-scale',\n  '+scene' = '+scene',\n  '-scene' = '-scene',\n  '+scenes' = '+scenes',\n  '-scenes' = '-scenes',\n  '+screen' = '+screen',\n  '-screen' = '-screen',\n  '-script' = '-script',\n  '+seed' = '+seed',\n  '-seed' = '-seed',\n  '-segment' = '-segment',\n  '-selective-blur' = '-selective-blur',\n  '-separate' = '-separate',\n  '-sepia-tone' = '-sepia-tone',\n  '+set' = '+set',\n  '-set' = '-set',\n  '-shade' = '-shade',\n  '-shadow' = '-shadow',\n  '+shared-memory' = '+shared-memory',\n  '-shared-memory' = '-shared-memory',\n  '-sharpen' = '-sharpen',\n  '-shave' = '-shave',\n  '-shear' = '-shear',\n  '-sigmoidal-contrast' = '-sigmoidal-contrast',\n  '+sigmoidal-contrast' = '+sigmoidal-contrast',\n  '+silent' = '+silent',\n  '-silent' = '-silent',\n  '+similarity-threshold' = '+similarity-threshold',\n  '-similarity-threshold' = '-similarity-threshold',\n  '-sketch' = '-sketch',\n  '-smush' = '-smush',\n  '+smush' = '+smush',\n  '+snaps' = '+snaps',\n  '-snaps' = '-snaps',\n  '-solarize' = '-solarize',\n  '-sparse-color' = '-sparse-color',\n  '-splice' = '-splice',\n  '-spread' = '-spread',\n  '-statistic' = '-statistic',\n  '+stegano' = '+stegano',\n  '-stegano' = '-stegano',\n  '-stereo' = '-stereo',\n  '-stretch' = '-stretch',\n  '-strip' = '-strip',\n  '+stroke' = '+stroke',\n  '-stroke' = '-stroke',\n  '-strokewidth' = '-strokewidth',\n  '+strokewidth' = '+strokewidth',\n  '+style' = '+style',\n  '-style' = '-style',\n  '-subimage' = '-subimage',\n  '-subimage-search' = '-subimage-search',\n  '+subimage-search' = '+subimage-search',\n  '+swap' = '+swap',\n  '-swap' = '-swap',\n  '-swirl' = '-swirl',\n  '-synchronize' = '-synchronize',\n  '+synchronize' = '+synchronize',\n  '-taint' = '-taint',\n  '+taint' = '+taint',\n  '+text-font' = '+text-font',\n  '-text-font' = '-text-font',\n  '+texture' = '+texture',\n  '-texture' = '-texture',\n  '+threshold' = '+threshold',\n  '-threshold' = '-threshold',\n  '-thumbnail' = '-thumbnail',\n  '+tile' = '+tile',\n  '-tile' = '-tile',\n  '+tile-offset' = '+tile-offset',\n  '-tile-offset' = '-tile-offset',\n  '-tint' = '-tint',\n  '+tint' = '+tint',\n  '+title' = '+title',\n  '-title' = '-title',\n  '-transparent' = '-transparent',\n  '+transparent' = '+transparent',\n  '+transparent-color' = '+transparent-color',\n  '-transparent-color' = '-transparent-color',\n  '-transpose' = '-transpose',\n  '-transverse' = '-transverse',\n  '-treedepth' = '-treedepth',\n  '-trim' = '-trim',\n  '+type' = '+type',\n  '-type' = '-type',\n  '+undercolor' = '+undercolor',\n  '-undercolor' = '-undercolor',\n  '-unique' = '-unique',\n  '+unique' = '+unique',\n  '-unique-colors' = '-unique-colors',\n  '+units' = '+units',\n  '-units' = '-units',\n  '-unsharp' = '-unsharp',\n  '+update' = '+update',\n  '-update' = '-update',\n  '+use-pixmap' = '+use-pixmap',\n  '-use-pixmap' = '-use-pixmap',\n  '-verbose' = '-verbose',\n  '+verbose' = '+verbose',\n  '-version' = '-version',\n  '+view' = '+view',\n  '-view' = '-view',\n  '-vignette' = '-vignette',\n  '+visual' = '+visual',\n  '-visual' = '-visual',\n  '+watermark' = '+watermark',\n  '-watermark' = '-watermark',\n  '-wave' = '-wave',\n  '-wavelet-denoise' = '-wavelet-denoise',\n  '-weight' = '-weight',\n  '+white-point' = '+white-point',\n  '-white-point' = '-white-point',\n  '-white-threshold' = '-white-threshold',\n  '+window' = '+window',\n  '-window' = '-window',\n  '+window-group' = '+window-group',\n  '-window-group' = '-window-group',\n  '-write' = '-write',\n  '+write' = '+write',\n  '+write-mask' = '+write-mask',\n  '-write-mask' = '-write-mask',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMCompliance {\n  'CSS' = 'CSS',\n  'MVG' = 'MVG',\n  'No' = 'No',\n  'SVG' = 'SVG',\n  'X11' = 'X11',\n  'XPM' = 'XPM',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMComplex {\n  'Add' = 'Add',\n  'Conjugate' = 'Conjugate',\n  'Divide' = 'Divide',\n  'MagnitudePhase' = 'MagnitudePhase',\n  'Multiply' = 'Multiply',\n  'RealImaginary' = 'RealImaginary',\n  'Subtract' = 'Subtract',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMCompose {\n  'Atop' = 'Atop',\n  'Blend' = 'Blend',\n  'Blur' = 'Blur',\n  'Bumpmap' = 'Bumpmap',\n  'ChangeMask' = 'ChangeMask',\n  'Clear' = 'Clear',\n  'ColorBurn' = 'ColorBurn',\n  'ColorDodge' = 'ColorDodge',\n  'Colorize' = 'Colorize',\n  'CopyAlpha' = 'CopyAlpha',\n  'CopyBlack' = 'CopyBlack',\n  'CopyBlue' = 'CopyBlue',\n  'CopyCyan' = 'CopyCyan',\n  'CopyGreen' = 'CopyGreen',\n  'Copy' = 'Copy',\n  'CopyMagenta' = 'CopyMagenta',\n  'CopyRed' = 'CopyRed',\n  'CopyYellow' = 'CopyYellow',\n  'Darken' = 'Darken',\n  'DarkenIntensity' = 'DarkenIntensity',\n  'DivideDst' = 'DivideDst',\n  'DivideSrc' = 'DivideSrc',\n  'Dst' = 'Dst',\n  'Difference' = 'Difference',\n  'Displace' = 'Displace',\n  'Dissolve' = 'Dissolve',\n  'Distort' = 'Distort',\n  'DstAtop' = 'DstAtop',\n  'DstIn' = 'DstIn',\n  'DstOut' = 'DstOut',\n  'DstOver' = 'DstOver',\n  'Exclusion' = 'Exclusion',\n  'HardLight' = 'HardLight',\n  'HardMix' = 'HardMix',\n  'Hue' = 'Hue',\n  'In' = 'In',\n  'Intensity' = 'Intensity',\n  'Lighten' = 'Lighten',\n  'LightenIntensity' = 'LightenIntensity',\n  'LinearBurn' = 'LinearBurn',\n  'LinearDodge' = 'LinearDodge',\n  'LinearLight' = 'LinearLight',\n  'Luminize' = 'Luminize',\n  'Mathematics' = 'Mathematics',\n  'MinusDst' = 'MinusDst',\n  'MinusSrc' = 'MinusSrc',\n  'Modulate' = 'Modulate',\n  'ModulusAdd' = 'ModulusAdd',\n  'ModulusSubtract' = 'ModulusSubtract',\n  'Multiply' = 'Multiply',\n  'None' = 'None',\n  'Out' = 'Out',\n  'Overlay' = 'Overlay',\n  'Over' = 'Over',\n  'PegtopLight' = 'PegtopLight',\n  'PinLight' = 'PinLight',\n  'Plus' = 'Plus',\n  'Replace' = 'Replace',\n  'Saturate' = 'Saturate',\n  'Screen' = 'Screen',\n  'SoftLight' = 'SoftLight',\n  'Src' = 'Src',\n  'SrcAtop' = 'SrcAtop',\n  'SrcIn' = 'SrcIn',\n  'SrcOut' = 'SrcOut',\n  'SrcOver' = 'SrcOver',\n  'Stereo' = 'Stereo',\n  'VividLight' = 'VividLight',\n  'Xor' = 'Xor',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMCompress {\n  'B44A' = 'B44A',\n  'B44' = 'B44',\n  'BZip' = 'BZip',\n  'DXT1' = 'DXT1',\n  'DXT3' = 'DXT3',\n  'DXT5' = 'DXT5',\n  'Fax' = 'Fax',\n  'Group4' = 'Group4',\n  'JBIG1' = 'JBIG1',\n  'JBIG2' = 'JBIG2',\n  'JPEG2000' = 'JPEG2000',\n  'JPEG' = 'JPEG',\n  'LosslessJPEG' = 'LosslessJPEG',\n  'Lossless' = 'Lossless',\n  'LZMA' = 'LZMA',\n  'LZW' = 'LZW',\n  'None' = 'None',\n  'Piz' = 'Piz',\n  'Pxr24' = 'Pxr24',\n  'RLE' = 'RLE',\n  'RunlengthEncoded' = 'RunlengthEncoded',\n  'WebP' = 'WebP',\n  'ZipS' = 'ZipS',\n  'Zip' = 'Zip',\n  'Zstd' = 'Zstd',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMDataType {\n  'Byte' = 'Byte',\n  'Long' = 'Long',\n  'Short' = 'Short',\n  'String' = 'String',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMDebug {\n  'All' = 'All',\n  'Accelerate' = 'Accelerate',\n  'Annotate' = 'Annotate',\n  'Blob' = 'Blob',\n  'Cache' = 'Cache',\n  'Coder' = 'Coder',\n  'Command' = 'Command',\n  'Configure' = 'Configure',\n  'Deprecate' = 'Deprecate',\n  'Draw' = 'Draw',\n  'Exception' = 'Exception',\n  'Locale' = 'Locale',\n  'Module' = 'Module',\n  'None' = 'None',\n  'Pixel' = 'Pixel',\n  'Policy' = 'Policy',\n  'Resource' = 'Resource',\n  'Trace' = 'Trace',\n  'Transform' = 'Transform',\n  'User' = 'User',\n  'Wand' = 'Wand',\n  'X11' = 'X11',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMDecoration {\n  'LineThrough' = 'LineThrough',\n  'None' = 'None',\n  'Overline' = 'Overline',\n  'Underline' = 'Underline',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMDirection {\n  'right-to-left' = 'right-to-left',\n  'left-to-right' = 'left-to-right',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMDispose {\n  'Undefined' = 'Undefined',\n  'Background' = 'Background',\n  'None' = 'None',\n  'Previous' = 'Previous',\n  '0_' = '0',\n  '1_' = '1',\n  '2_' = '2',\n  '3_' = '3',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMDistort {\n  'Affine' = 'Affine',\n  'AffineProjection' = 'AffineProjection',\n  'ScaleRotateTranslate' = 'ScaleRotateTranslate',\n  'SRT' = 'SRT',\n  'Perspective' = 'Perspective',\n  'PerspectiveProjection' = 'PerspectiveProjection',\n  'BilinearForward' = 'BilinearForward',\n  'BilinearReverse' = 'BilinearReverse',\n  'Polynomial' = 'Polynomial',\n  'Arc' = 'Arc',\n  'Polar' = 'Polar',\n  'DePolar' = 'DePolar',\n  'Barrel' = 'Barrel',\n  'BarrelInverse' = 'BarrelInverse',\n  'Shepards' = 'Shepards',\n  'Resize' = 'Resize',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMDither {\n  'None' = 'None',\n  'FloydSteinberg' = 'FloydSteinberg',\n  'Riemersma' = 'Riemersma',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMEndian {\n  'LSB' = 'LSB',\n  'MSB' = 'MSB',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMEvaluate {\n  'Abs' = 'Abs',\n  'Add' = 'Add',\n  'AddModulus' = 'AddModulus',\n  'And' = 'And',\n  'Cos' = 'Cos',\n  'Cosine' = 'Cosine',\n  'Divide' = 'Divide',\n  'Exp' = 'Exp',\n  'Exponential' = 'Exponential',\n  'GaussianNoise' = 'GaussianNoise',\n  'ImpulseNoise' = 'ImpulseNoise',\n  'LaplacianNoise' = 'LaplacianNoise',\n  'LeftShift' = 'LeftShift',\n  'Log' = 'Log',\n  'Max' = 'Max',\n  'Mean' = 'Mean',\n  'Median' = 'Median',\n  'Min' = 'Min',\n  'MultiplicativeNoise' = 'MultiplicativeNoise',\n  'Multiply' = 'Multiply',\n  'Or' = 'Or',\n  'PoissonNoise' = 'PoissonNoise',\n  'Pow' = 'Pow',\n  'RightShift' = 'RightShift',\n  'RMS' = 'RMS',\n  'RootMeanSquare' = 'RootMeanSquare',\n  'Set' = 'Set',\n  'Sin' = 'Sin',\n  'Sine' = 'Sine',\n  'Subtract' = 'Subtract',\n  'Sum' = 'Sum',\n  'Threshold' = 'Threshold',\n  'ThresholdBlack' = 'ThresholdBlack',\n  'ThresholdWhite' = 'ThresholdWhite',\n  'UniformNoise' = 'UniformNoise',\n  'Xor' = 'Xor',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMFillRule {\n  'Evenodd' = 'Evenodd',\n  'NonZero' = 'NonZero',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMFilter {\n  'Bartlett' = 'Bartlett',\n  'Blackman' = 'Blackman',\n  'Bohman' = 'Bohman',\n  'Box' = 'Box',\n  'Catrom' = 'Catrom',\n  'Cosine' = 'Cosine',\n  'Cubic' = 'Cubic',\n  'Gaussian' = 'Gaussian',\n  'Hamming' = 'Hamming',\n  'Hann' = 'Hann',\n  'Hermite' = 'Hermite',\n  'Jinc' = 'Jinc',\n  'Kaiser' = 'Kaiser',\n  'Lagrange' = 'Lagrange',\n  'Lanczos' = 'Lanczos',\n  'Lanczos2' = 'Lanczos2',\n  'Lanczos2Sharp' = 'Lanczos2Sharp',\n  'LanczosRadius' = 'LanczosRadius',\n  'LanczosSharp' = 'LanczosSharp',\n  'Mitchell' = 'Mitchell',\n  'Parzen' = 'Parzen',\n  'Point' = 'Point',\n  'Quadratic' = 'Quadratic',\n  'Robidoux' = 'Robidoux',\n  'RobidouxSharp' = 'RobidouxSharp',\n  'Sinc' = 'Sinc',\n  'SincFast' = 'SincFast',\n  'Spline' = 'Spline',\n  'CubicSpline' = 'CubicSpline',\n  'Triangle' = 'Triangle',\n  'Welch' = 'Welch',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMFunction {\n  'Polynomial' = 'Polynomial',\n  'Sinusoid' = 'Sinusoid',\n  'ArcSin' = 'ArcSin',\n  'ArcTan' = 'ArcTan',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMGradient {\n  'Linear' = 'Linear',\n  'Radial' = 'Radial',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMGravity {\n  'None' = 'None',\n  'Center' = 'Center',\n  'East' = 'East',\n  'Forget' = 'Forget',\n  'NorthEast' = 'NorthEast',\n  'North' = 'North',\n  'NorthWest' = 'NorthWest',\n  'SouthEast' = 'SouthEast',\n  'South' = 'South',\n  'SouthWest' = 'SouthWest',\n  'West' = 'West',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMIntensity {\n  'Average' = 'Average',\n  'Brightness' = 'Brightness',\n  'Lightness' = 'Lightness',\n  'Mean' = 'Mean',\n  'MS' = 'MS',\n  'Rec601Luma' = 'Rec601Luma',\n  'Rec601Luminance' = 'Rec601Luminance',\n  'Rec709Luma' = 'Rec709Luma',\n  'Rec709Luminance' = 'Rec709Luminance',\n  'RMS' = 'RMS',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMIntent {\n  'Absolute' = 'Absolute',\n  'Perceptual' = 'Perceptual',\n  'Relative' = 'Relative',\n  'Saturation' = 'Saturation',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMInterlace {\n  'Line' = 'Line',\n  'None' = 'None',\n  'Plane' = 'Plane',\n  'Partition' = 'Partition',\n  'GIF' = 'GIF',\n  'JPEG' = 'JPEG',\n  'PNG' = 'PNG',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMInterpolate {\n  'Average' = 'Average',\n  'Average4' = 'Average4',\n  'Average9' = 'Average9',\n  'Average16' = 'Average16',\n  'Background' = 'Background',\n  'Bilinear' = 'Bilinear',\n  'Blend' = 'Blend',\n  'Catrom' = 'Catrom',\n  'Integer' = 'Integer',\n  'Mesh' = 'Mesh',\n  'Nearest' = 'Nearest',\n  'Spline' = 'Spline',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMKernel {\n  'Unity' = 'Unity',\n  'Gaussian' = 'Gaussian',\n  'DoG' = 'DoG',\n  'LoG' = 'LoG',\n  'Blur' = 'Blur',\n  'Comet' = 'Comet',\n  'Binomial' = 'Binomial',\n  'Laplacian' = 'Laplacian',\n  'Sobel' = 'Sobel',\n  'FreiChen' = 'FreiChen',\n  'Roberts' = 'Roberts',\n  'Prewitt' = 'Prewitt',\n  'Compass' = 'Compass',\n  'Kirsch' = 'Kirsch',\n  'Diamond' = 'Diamond',\n  'Square' = 'Square',\n  'Rectangle' = 'Rectangle',\n  'Disk' = 'Disk',\n  'Octagon' = 'Octagon',\n  'Plus' = 'Plus',\n  'Cross' = 'Cross',\n  'Ring' = 'Ring',\n  'Peaks' = 'Peaks',\n  'Edges' = 'Edges',\n  'Corners' = 'Corners',\n  'Diagonals' = 'Diagonals',\n  'LineEnds' = 'LineEnds',\n  'LineJunctions' = 'LineJunctions',\n  'Ridges' = 'Ridges',\n  'ConvexHull' = 'ConvexHull',\n  'ThinSe' = 'ThinSe',\n  'Skeleton' = 'Skeleton',\n  'Chebyshev' = 'Chebyshev',\n  'Manhattan' = 'Manhattan',\n  'Octagonal' = 'Octagonal',\n  'Euclidean' = 'Euclidean',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMLayers {\n  'Coalesce' = 'Coalesce',\n  'CompareAny' = 'CompareAny',\n  'CompareClear' = 'CompareClear',\n  'CompareOverlay' = 'CompareOverlay',\n  'Dispose' = 'Dispose',\n  'Optimize' = 'Optimize',\n  'OptimizeFrame' = 'OptimizeFrame',\n  'OptimizePlus' = 'OptimizePlus',\n  'OptimizeTransparency' = 'OptimizeTransparency',\n  'RemoveDups' = 'RemoveDups',\n  'RemoveZero' = 'RemoveZero',\n  'Composite' = 'Composite',\n  'Merge' = 'Merge',\n  'Flatten' = 'Flatten',\n  'Mosaic' = 'Mosaic',\n  'TrimBounds' = 'TrimBounds',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMLineCap {\n  'Butt' = 'Butt',\n  'Round' = 'Round',\n  'Square' = 'Square',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMLineJoin {\n  'Bevel' = 'Bevel',\n  'Miter' = 'Miter',\n  'Round' = 'Round',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMList {\n  'Align' = 'Align',\n  'Alpha' = 'Alpha',\n  'AutoThreshold' = 'AutoThreshold',\n  'Boolean' = 'Boolean',\n  'Cache' = 'Cache',\n  'Channel' = 'Channel',\n  'Class' = 'Class',\n  'CLI' = 'CLI',\n  'ClipPath' = 'ClipPath',\n  'Coder' = 'Coder',\n  'Color' = 'Color',\n  'Colorspace' = 'Colorspace',\n  'Command' = 'Command',\n  'Compliance' = 'Compliance',\n  'Complex' = 'Complex',\n  'Compose' = 'Compose',\n  'Compress' = 'Compress',\n  'Configure' = 'Configure',\n  'DataType' = 'DataType',\n  'Debug' = 'Debug',\n  'Decoration' = 'Decoration',\n  'Delegate' = 'Delegate',\n  'Direction' = 'Direction',\n  'Dispose' = 'Dispose',\n  'Distort' = 'Distort',\n  'Dither' = 'Dither',\n  'Endian' = 'Endian',\n  'Evaluate' = 'Evaluate',\n  'FillRule' = 'FillRule',\n  'Filter' = 'Filter',\n  'Font' = 'Font',\n  'Format' = 'Format',\n  'Function' = 'Function',\n  'Gradient' = 'Gradient',\n  'Gravity' = 'Gravity',\n  'Intensity' = 'Intensity',\n  'Intent' = 'Intent',\n  'Interlace' = 'Interlace',\n  'Interpolate' = 'Interpolate',\n  'Kernel' = 'Kernel',\n  'Layers' = 'Layers',\n  'LineCap' = 'LineCap',\n  'LineJoin' = 'LineJoin',\n  'List' = 'List',\n  'Locale' = 'Locale',\n  'LogEvent' = 'LogEvent',\n  'Log' = 'Log',\n  'Magic' = 'Magic',\n  'Method' = 'Method',\n  'Metric' = 'Metric',\n  'Mime' = 'Mime',\n  'Mode' = 'Mode',\n  'Morphology' = 'Morphology',\n  'Module' = 'Module',\n  'Noise' = 'Noise',\n  'Orientation' = 'Orientation',\n  'PixelChannel' = 'PixelChannel',\n  'PixelIntensity' = 'PixelIntensity',\n  'PixelMask' = 'PixelMask',\n  'PixelTrait' = 'PixelTrait',\n  'Policy' = 'Policy',\n  'PolicyDomain' = 'PolicyDomain',\n  'PolicyRights' = 'PolicyRights',\n  'Preview' = 'Preview',\n  'Primitive' = 'Primitive',\n  'QuantumFormat' = 'QuantumFormat',\n  'Resource' = 'Resource',\n  'SparseColor' = 'SparseColor',\n  'Statistic' = 'Statistic',\n  'Storage' = 'Storage',\n  'Stretch' = 'Stretch',\n  'Style' = 'Style',\n  'Threshold' = 'Threshold',\n  'Tool' = 'Tool',\n  'Type' = 'Type',\n  'Units' = 'Units',\n  'Validate' = 'Validate',\n  'VirtualPixel' = 'VirtualPixel',\n  'Weight' = 'Weight',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMLogEvent {\n  'All' = 'All',\n  'Accelerate' = 'Accelerate',\n  'Annotate' = 'Annotate',\n  'Blob' = 'Blob',\n  'Cache' = 'Cache',\n  'Coder' = 'Coder',\n  'Command' = 'Command',\n  'Configure' = 'Configure',\n  'Deprecate' = 'Deprecate',\n  'Draw' = 'Draw',\n  'Exception' = 'Exception',\n  'Locale' = 'Locale',\n  'Module' = 'Module',\n  'None' = 'None',\n  'Pixel' = 'Pixel',\n  'Policy' = 'Policy',\n  'Resource' = 'Resource',\n  'Trace' = 'Trace',\n  'Transform' = 'Transform',\n  'User' = 'User',\n  'Wand' = 'Wand',\n  'X11' = 'X11',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMLog {\n  'Path: /etc/ImageMagick-7/log.xml' = 'Path: /etc/ImageMagick-7/log.xml',\n  'Console        Generations     Limit  Format' = 'Console        Generations     Limit  Format',\n  '-------------------------------------------------------------------------------' = '-------------------------------------------------------------------------------',\n  'Magick-%g.log            3      2000   %t %r %u %v %d %c[%p]: %m/%f/%l/%d\\n  %e' = 'Magick-%g.log            3      2000   %t %r %u %v %d %c[%p]: %m/%f/%l/%d\\n  %e',\n  'Path: [built-in]' = 'Path: [built-in]',\n  'Magick-%g.log            0         0   %t %r %u %v %d %c[%p]: %m/%f/%l/%d\\n  %e' = 'Magick-%g.log            0         0   %t %r %u %v %d %c[%p]: %m/%f/%l/%d\\n  %e',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMMethod {\n  'FillToBorder' = 'FillToBorder',\n  'Floodfill' = 'Floodfill',\n  'Point' = 'Point',\n  'Replace' = 'Replace',\n  'Reset' = 'Reset',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMMetric {\n  'AE' = 'AE',\n  'DSSIM' = 'DSSIM',\n  'Fuzz' = 'Fuzz',\n  'MAE' = 'MAE',\n  'MEPP' = 'MEPP',\n  'MSE' = 'MSE',\n  'NCC' = 'NCC',\n  'PAE' = 'PAE',\n  'PHASH' = 'PHASH',\n  'PSNR' = 'PSNR',\n  'RMSE' = 'RMSE',\n  'SSIM' = 'SSIM',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMMode {\n  'Concatenate' = 'Concatenate',\n  'Frame' = 'Frame',\n  'Unframe' = 'Unframe',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMMorphology {\n  'Correlate' = 'Correlate',\n  'Convolve' = 'Convolve',\n  'Dilate' = 'Dilate',\n  'Erode' = 'Erode',\n  'Close' = 'Close',\n  'Open' = 'Open',\n  'DilateIntensity' = 'DilateIntensity',\n  'ErodeIntensity' = 'ErodeIntensity',\n  'CloseIntensity' = 'CloseIntensity',\n  'OpenIntensity' = 'OpenIntensity',\n  'DilateI' = 'DilateI',\n  'ErodeI' = 'ErodeI',\n  'CloseI' = 'CloseI',\n  'OpenI' = 'OpenI',\n  'Smooth' = 'Smooth',\n  'EdgeOut' = 'EdgeOut',\n  'EdgeIn' = 'EdgeIn',\n  'Edge' = 'Edge',\n  'TopHat' = 'TopHat',\n  'BottomHat' = 'BottomHat',\n  'Hmt' = 'Hmt',\n  'HitNMiss' = 'HitNMiss',\n  'HitAndMiss' = 'HitAndMiss',\n  'Thinning' = 'Thinning',\n  'Thicken' = 'Thicken',\n  'Distance' = 'Distance',\n  'IterativeDistance' = 'IterativeDistance',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMModule {\n  'Path: /usr/lib/ImageMagick-7.0.8/modules-Q16HDRI/coders' = 'Path: /usr/lib/ImageMagick-7.0.8/modules-Q16HDRI/coders',\n  'Image Coder' = 'Image Coder',\n  '-------------------------------------------------------------------------------' = '-------------------------------------------------------------------------------',\n  'aai' = 'aai',\n  'art' = 'art',\n  'avs' = 'avs',\n  'bgr' = 'bgr',\n  'bmp' = 'bmp',\n  'braille' = 'braille',\n  'cals' = 'cals',\n  'caption' = 'caption',\n  'cin' = 'cin',\n  'cip' = 'cip',\n  'clip' = 'clip',\n  'cmyk' = 'cmyk',\n  'cut' = 'cut',\n  'dcm' = 'dcm',\n  'dds' = 'dds',\n  'debug' = 'debug',\n  'dib' = 'dib',\n  'dng' = 'dng',\n  'dot' = 'dot',\n  'dpx' = 'dpx',\n  'ept' = 'ept',\n  'exr' = 'exr',\n  'fax' = 'fax',\n  'fits' = 'fits',\n  'gif' = 'gif',\n  'gradient' = 'gradient',\n  'gray' = 'gray',\n  'hald' = 'hald',\n  'hdr' = 'hdr',\n  'heic' = 'heic',\n  'histogram' = 'histogram',\n  'hrz' = 'hrz',\n  'html' = 'html',\n  'icon' = 'icon',\n  'info' = 'info',\n  'inline' = 'inline',\n  'ipl' = 'ipl',\n  'jbig' = 'jbig',\n  'jnx' = 'jnx',\n  'jp2' = 'jp2',\n  'jpeg' = 'jpeg',\n  'json' = 'json',\n  'label' = 'label',\n  'mac' = 'mac',\n  'magick' = 'magick',\n  'map' = 'map',\n  'mask' = 'mask',\n  'mat' = 'mat',\n  'matte' = 'matte',\n  'meta' = 'meta',\n  'miff' = 'miff',\n  'mono' = 'mono',\n  'mpc' = 'mpc',\n  'mpeg' = 'mpeg',\n  'mpr' = 'mpr',\n  'msl' = 'msl',\n  'mtv' = 'mtv',\n  'mvg' = 'mvg',\n  'null' = 'null',\n  'otb' = 'otb',\n  'palm' = 'palm',\n  'pango' = 'pango',\n  'pattern' = 'pattern',\n  'pcd' = 'pcd',\n  'pcl' = 'pcl',\n  'pcx' = 'pcx',\n  'pdb' = 'pdb',\n  'pdf' = 'pdf',\n  'pes' = 'pes',\n  'pgx' = 'pgx',\n  'pict' = 'pict',\n  'pix' = 'pix',\n  'plasma' = 'plasma',\n  'png' = 'png',\n  'pnm' = 'pnm',\n  'ps' = 'ps',\n  'ps2' = 'ps2',\n  'ps3' = 'ps3',\n  'psd' = 'psd',\n  'pwp' = 'pwp',\n  'raw' = 'raw',\n  'rgb' = 'rgb',\n  'rgf' = 'rgf',\n  'rla' = 'rla',\n  'rle' = 'rle',\n  'scr' = 'scr',\n  'sct' = 'sct',\n  'sfw' = 'sfw',\n  'sgi' = 'sgi',\n  'sixel' = 'sixel',\n  'stegano' = 'stegano',\n  'sun' = 'sun',\n  'svg' = 'svg',\n  'tga' = 'tga',\n  'thumbnail' = 'thumbnail',\n  'tiff' = 'tiff',\n  'tile' = 'tile',\n  'tim' = 'tim',\n  'ttf' = 'ttf',\n  'txt' = 'txt',\n  'uil' = 'uil',\n  'url' = 'url',\n  'uyvy' = 'uyvy',\n  'vicar' = 'vicar',\n  'vid' = 'vid',\n  'viff' = 'viff',\n  'vips' = 'vips',\n  'wbmp' = 'wbmp',\n  'webp' = 'webp',\n  'wmf' = 'wmf',\n  'wpg' = 'wpg',\n  'x' = 'x',\n  'xbm' = 'xbm',\n  'xc' = 'xc',\n  'xcf' = 'xcf',\n  'xpm' = 'xpm',\n  'xps' = 'xps',\n  'xtrn' = 'xtrn',\n  'xwd' = 'xwd',\n  'ycbcr' = 'ycbcr',\n  'yuv' = 'yuv',\n  'Path: /usr/lib/ImageMagick-7.0.8/modules-Q16HDRI/filters' = 'Path: /usr/lib/ImageMagick-7.0.8/modules-Q16HDRI/filters',\n  'Image Filter' = 'Image Filter',\n  'analyze' = 'analyze',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMNoise {\n  'Gaussian' = 'Gaussian',\n  'Impulse' = 'Impulse',\n  'Laplacian' = 'Laplacian',\n  'Multiplicative' = 'Multiplicative',\n  'Poisson' = 'Poisson',\n  'Random' = 'Random',\n  'Uniform' = 'Uniform',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMOrientation {\n  'TopLeft' = 'TopLeft',\n  'TopRight' = 'TopRight',\n  'BottomRight' = 'BottomRight',\n  'BottomLeft' = 'BottomLeft',\n  'LeftTop' = 'LeftTop',\n  'RightTop' = 'RightTop',\n  'RightBottom' = 'RightBottom',\n  'LeftBottom' = 'LeftBottom',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMPixelChannel {\n  'Undefined' = 'Undefined',\n  'A' = 'A',\n  'Alpha' = 'Alpha',\n  'B' = 'B',\n  'Bk' = 'Bk',\n  'Black' = 'Black',\n  'Blue' = 'Blue',\n  'Cb' = 'Cb',\n  'Composite' = 'Composite',\n  'CompositeMask' = 'CompositeMask',\n  'C' = 'C',\n  'Cr' = 'Cr',\n  'Cyan' = 'Cyan',\n  'Gray' = 'Gray',\n  'G' = 'G',\n  'Green' = 'Green',\n  'Index' = 'Index',\n  'Intensity' = 'Intensity',\n  'K' = 'K',\n  'M' = 'M',\n  'Magenta' = 'Magenta',\n  'Meta' = 'Meta',\n  'O' = 'O',\n  'R' = 'R',\n  'ReadMask' = 'ReadMask',\n  'Red' = 'Red',\n  'Sync' = 'Sync',\n  'WriteMask' = 'WriteMask',\n  'Y' = 'Y',\n  'Yellow' = 'Yellow',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMPixelIntensity {\n  'Average' = 'Average',\n  'Brightness' = 'Brightness',\n  'Lightness' = 'Lightness',\n  'Mean' = 'Mean',\n  'MS' = 'MS',\n  'Rec601Luma' = 'Rec601Luma',\n  'Rec601Luminance' = 'Rec601Luminance',\n  'Rec709Luma' = 'Rec709Luma',\n  'Rec709Luminance' = 'Rec709Luminance',\n  'RMS' = 'RMS',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMPixelMask {\n  'R' = 'R',\n  'Read' = 'Read',\n  'W' = 'W',\n  'Write' = 'Write',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMPixelTrait {\n  'Blend' = 'Blend',\n  'Copy' = 'Copy',\n  'Update' = 'Update',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMPolicyDomain {\n  'Cache' = 'Cache',\n  'Coder' = 'Coder',\n  'Delegate' = 'Delegate',\n  'Filter' = 'Filter',\n  'Module' = 'Module',\n  'Path' = 'Path',\n  'Resource' = 'Resource',\n  'System' = 'System',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMPolicyRights {\n  'All' = 'All',\n  'Execute' = 'Execute',\n  'None' = 'None',\n  'Read' = 'Read',\n  'Write' = 'Write',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMPreview {\n  'AddNoise' = 'AddNoise',\n  'Blur' = 'Blur',\n  'Brightness' = 'Brightness',\n  'Charcoal' = 'Charcoal',\n  'Despeckle' = 'Despeckle',\n  'Dull' = 'Dull',\n  'EdgeDetect' = 'EdgeDetect',\n  'Gamma' = 'Gamma',\n  'Grayscale' = 'Grayscale',\n  'Hue' = 'Hue',\n  'Implode' = 'Implode',\n  'JPEG' = 'JPEG',\n  'OilPaint' = 'OilPaint',\n  'Quantize' = 'Quantize',\n  'Raise' = 'Raise',\n  'ReduceNoise' = 'ReduceNoise',\n  'Roll' = 'Roll',\n  'Rotate' = 'Rotate',\n  'Saturation' = 'Saturation',\n  'Segment' = 'Segment',\n  'Shade' = 'Shade',\n  'Sharpen' = 'Sharpen',\n  'Shear' = 'Shear',\n  'Solarize' = 'Solarize',\n  'Spiff' = 'Spiff',\n  'Spread' = 'Spread',\n  'Swirl' = 'Swirl',\n  'Threshold' = 'Threshold',\n  'Wave' = 'Wave',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMPrimitive {\n  'Alpha' = 'Alpha',\n  'Arc' = 'Arc',\n  'Bezier' = 'Bezier',\n  'Circle' = 'Circle',\n  'Color' = 'Color',\n  'Ellipse' = 'Ellipse',\n  'Image' = 'Image',\n  'Line' = 'Line',\n  'Matte' = 'Matte',\n  'Path' = 'Path',\n  'Point' = 'Point',\n  'Polygon' = 'Polygon',\n  'Polyline' = 'Polyline',\n  'Rectangle' = 'Rectangle',\n  'RoundRectangle' = 'RoundRectangle',\n  'Text' = 'Text',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMQuantumFormat {\n  'FloatingPoint' = 'FloatingPoint',\n  'Signed' = 'Signed',\n  'Unsigned' = 'Unsigned',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMSparseColor {\n  'Barycentric' = 'Barycentric',\n  'Bilinear' = 'Bilinear',\n  'Inverse' = 'Inverse',\n  'Shepards' = 'Shepards',\n  'Voronoi' = 'Voronoi',\n  'Manhattan' = 'Manhattan',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMStatistic {\n  'Gradient' = 'Gradient',\n  'Maximum' = 'Maximum',\n  'Mean' = 'Mean',\n  'Median' = 'Median',\n  'Minimum' = 'Minimum',\n  'Mode' = 'Mode',\n  'NonPeak' = 'NonPeak',\n  'RootMeanSquare' = 'RootMeanSquare',\n  'RMS' = 'RMS',\n  'StandardDeviation' = 'StandardDeviation',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMStorage {\n  'Char' = 'Char',\n  'Double' = 'Double',\n  'Float' = 'Float',\n  'Long' = 'Long',\n  'LongLong' = 'LongLong',\n  'Quantum' = 'Quantum',\n  'Short' = 'Short',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMStretch {\n  'Any' = 'Any',\n  'Condensed' = 'Condensed',\n  'Expanded' = 'Expanded',\n  'ExtraCondensed' = 'ExtraCondensed',\n  'ExtraExpanded' = 'ExtraExpanded',\n  'Normal' = 'Normal',\n  'SemiCondensed' = 'SemiCondensed',\n  'SemiExpanded' = 'SemiExpanded',\n  'UltraCondensed' = 'UltraCondensed',\n  'UltraExpanded' = 'UltraExpanded',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMStyle {\n  'Any' = 'Any',\n  'Bold' = 'Bold',\n  'Italic' = 'Italic',\n  'Normal' = 'Normal',\n  'Oblique' = 'Oblique',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMTool {\n  'animate' = 'animate',\n  'compare' = 'compare',\n  'composite' = 'composite',\n  'conjure' = 'conjure',\n  'convert' = 'convert',\n  'display' = 'display',\n  'identify' = 'identify',\n  'import' = 'import',\n  'mogrify' = 'mogrify',\n  'montage' = 'montage',\n  'stream' = 'stream',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMType {\n  'Bilevel' = 'Bilevel',\n  'ColorSeparation' = 'ColorSeparation',\n  'ColorSeparationAlpha' = 'ColorSeparationAlpha',\n  'ColorSeparationMatte' = 'ColorSeparationMatte',\n  'Grayscale' = 'Grayscale',\n  'GrayscaleAlpha' = 'GrayscaleAlpha',\n  'GrayscaleMatte' = 'GrayscaleMatte',\n  'Optimize' = 'Optimize',\n  'Palette' = 'Palette',\n  'PaletteBilevelAlpha' = 'PaletteBilevelAlpha',\n  'PaletteBilevelMatte' = 'PaletteBilevelMatte',\n  'PaletteAlpha' = 'PaletteAlpha',\n  'PaletteMatte' = 'PaletteMatte',\n  'TrueColorAlpha' = 'TrueColorAlpha',\n  'TrueColorMatte' = 'TrueColorMatte',\n  'TrueColor' = 'TrueColor',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMUnits {\n  'PixelsPerInch' = 'PixelsPerInch',\n  'PixelsPerCentimeter' = 'PixelsPerCentimeter',\n  '1_' = '1',\n  '2_' = '2',\n  '3_' = '3',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMValidate {\n  'All' = 'All',\n  'Colorspace' = 'Colorspace',\n  'Compare' = 'Compare',\n  'Composite' = 'Composite',\n  'Convert' = 'Convert',\n  'FormatsDisk' = 'FormatsDisk',\n  'FormatsMap' = 'FormatsMap',\n  'FormatsMemory' = 'FormatsMemory',\n  'Identify' = 'Identify',\n  'ImportExport' = 'ImportExport',\n  'Montage' = 'Montage',\n  'Stream' = 'Stream',\n  'None' = 'None',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMVirtualPixel {\n  'Background' = 'Background',\n  'Black' = 'Black',\n  'CheckerTile' = 'CheckerTile',\n  'Dither' = 'Dither',\n  'Edge' = 'Edge',\n  'Gray' = 'Gray',\n  'HorizontalTile' = 'HorizontalTile',\n  'HorizontalTileEdge' = 'HorizontalTileEdge',\n  'Mirror' = 'Mirror',\n  'None' = 'None',\n  'Random' = 'Random',\n  'Tile' = 'Tile',\n  'Transparent' = 'Transparent',\n  'VerticalTile' = 'VerticalTile',\n  'VerticalTileEdge' = 'VerticalTileEdge',\n  'White' = 'White',\n}\n","/* auto-generated file using command `npx ts-node scripts/generateImEnums.ts` */\nexport enum IMWeight {\n  'Thin' = 'Thin',\n  'ExtraLight' = 'ExtraLight',\n  'UltraLight' = 'UltraLight',\n  'Normal' = 'Normal',\n  'Regular' = 'Regular',\n  'Medium' = 'Medium',\n  'DemiBold' = 'DemiBold',\n  'SemiBold' = 'SemiBold',\n  'Bold' = 'Bold',\n  'ExtraBold' = 'ExtraBold',\n  'UltraBold' = 'UltraBold',\n  'Heavy' = 'Heavy',\n  'Black' = 'Black',\n}\n"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","_","label","sent","trys","ops","f","y","g","verb","Symbol","iterator","v","op","TypeError","pop","push","pMap","iterable","mapper","options","concurrency","Infinity","ret","isRejected","isIterableDone","resolvingCount","currentIndex","nextItem","element","error","execute","loadImageElement","buildImageSrc","getInputFilesFromHtmlInputElement","getPixelColor","executeAndReturnOutputFile","builtInImageNames","getBuiltInImages","extractInfo","getBuiltInImage","compare","compareNumber","getConfigureFolders","knownSupportedReadWriteImageFormats","executeOne","asExecuteConfig","isExecuteCommand","addExecuteListener","createImageHome","newExecutionContext","IMAlign","IMAlpha","IMAutoThreshold","IMBoolean","IMCache","IMChannel","IMClass","IMClipPath","IMColorspace","IMCommand","IMCompliance","IMComplex","IMCompose","IMCompress","IMDataType","IMDebug","IMDecoration","IMDirection","IMDispose","IMDistort","IMDither","IMEndian","IMEvaluate","IMFillRule","IMFilter","IMFunction","IMGradient","IMGravity","IMIntensity","IMIntent","IMInterlace","IMInterpolate","IMKernel","IMLayers","IMLineCap","IMLineJoin","IMList","IMLogEvent","IMLog","IMMethod","IMMetric","IMMode","IMMorphology","IMModule","IMNoise","IMOrientation","IMPixelChannel","IMPixelIntensity","IMPixelMask","IMPixelTrait","IMPolicyDomain","IMPolicyRights","IMPreview","IMPrimitive","IMQuantumFormat","IMSparseColor","IMStatistic","IMStorage","IMStretch","IMStyle","IMTool","IMType","IMUnits","IMValidate","IMVirtualPixel","IMWeight"],"mappings":"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"}